<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Shesha.Scheduler</name>
    </assembly>
    <members>
        <member name="T:Shesha.Scheduler.Attributes.ForwardDisableConcurrentExecutionAttribute">
            <summary>
            Attribute to forward <see cref="T:Hangfire.DisableConcurrentExecutionAttribute"/> to <see cref="T:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobAppService"/>
            </summary>
        </member>
        <member name="T:Shesha.Scheduler.Attributes.ScheduledJobAttribute">
            <summary>
            Contains basic info about scheduled job
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Attributes.ScheduledJobAttribute.Uid">
            <summary>
            Unique identifier of the job, all additional data in the DB is linked to the job using this Id
            </summary>
        </member>
        <member name="T:Shesha.Scheduler.Bootstrappers.ScheduledJobBootstrapper">
            <summary>
            Bootstraps scheduled jobs and saves them into the DB
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJob.JobName">
            <summary>
            Name of the scheduled job
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJob.JobNamespace">
            <summary>
            Namespace
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJob.JobDescription">
            <summary>
            Description of the job
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJob.JobStatus">
            <summary>
            Job status (Active/Inactive). Is used to switch job on/off.
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJob.StartupMode">
            <summary>
            Startup mode (Automatic/Manual)
            </summary>
        </member>
        <member name="T:Shesha.Scheduler.Domain.ScheduledJobExecution">
            <summary>
            Contains info about scheduled job execution
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJobExecution.StartedOn">
            <summary>
            Datetime of the execution start
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJobExecution.FinishedOn">
            <summary>
            Datetime of the execution finish
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJobExecution.LogFilePath">
            <summary>
            Log file path
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJobExecution.StartedBy">
            <summary>
            User who started the job (if it was done manually)
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJobExecution.Job">
            <summary>
            Executed scheduled job
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJobExecution.Trigger">
            <summary>
            Trigger by which the job was executed. May be null for manual jobs
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJobExecution.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJobExecution.Status">
            <summary>
            Status of the execution
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJobExecution.ParentExecution">
            <summary>
            Parent execution of the current one. Is used for execution retries
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJobTrigger.ParametersJson">
            <summary>
            Json string to pass parameters to a scheduled job in case want to reuse the same scheduled job but different input parameters         
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJobTrigger.Job">
            <summary>
            Scheduled job
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Domain.ScheduledJobTrigger.Status">
            <summary>
            Status of the trigger (enabled/disabled)
            </summary>
        </member>
        <member name="M:Shesha.Scheduler.Domain.ScheduledJobTrigger.#ctor">
            <summary>
            Notification to trigger upon failure of the job.
            </summary>
        </member>
        <member name="T:Shesha.Scheduler.Exceptions.JobDeletedException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Shesha.Scheduler.Exceptions.TriggerDeletedException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Shesha.Scheduler.IScheduledJobManager">
            <summary>
            Scheduled jobs manager
            </summary>
        </member>
        <member name="M:Shesha.Scheduler.IScheduledJobManager.EnqueueAllAsync">
            <summary>
            Enqueue all jobs using Hangfire
            </summary>
        </member>
        <member name="M:Shesha.Scheduler.IScheduledJobManager.GetJobType(System.Guid)">
            <summary>
            Get job type by trigger Id
            </summary>
            <param name="triggerId">Trigger Id</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Scheduler.IScheduledJobManager.RunJobAsync(System.Guid,System.Guid,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Run job
            </summary>
            <param name="jobId">Job id</param>
            <param name="executionId">executionId</param>
            <param name="startedById">Id of the started user</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Scheduler.IScheduledJobManager.GetJobTypeById(System.Guid)">
            <summary>
            Get job type by Id
            </summary>
            <param name="id">Job Id</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Scheduler.IScheduledJobManager.GetJobInstanceById(System.Guid)">
            <summary>
            Get job instance by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.Scheduler.Logging.JsonLayout">
            <summary>
            Json layout for scheduled jobs logging
            </summary>
        </member>
        <member name="M:Shesha.Scheduler.Logging.JsonLayout.ActivateOptions">
            inheritedDoc
        </member>
        <member name="M:Shesha.Scheduler.Logging.JsonLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            inheritedDoc
        </member>
        <member name="T:Shesha.Scheduler.ScheduledJobBase">
            <summary>
            Scheduled job base class
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.ScheduledJobBase.ParametersType">
            <summary>
            Type of the parameters class
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.ScheduledJobBase.IocManager">
            <summary>
            IoC manager
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.ScheduledJobBase.PathHelper">
            <summary>
            Path Helper
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.ScheduledJobBase.UnitOfWorkManager">
            <summary>
            Unit of work manager
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.ScheduledJobBase.JobRepository">
            <summary>
            Job repository
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.ScheduledJobBase.TriggerRepository">
            <summary>
            Trigger repository
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.ScheduledJobBase.JobExecutionRepository">
            <summary>
            Job execution repository
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.ScheduledJobBase.Logger">
            <summary>
            Reference to the logger to write logs.
            </summary>
        </member>
        <member name="F:Shesha.Scheduler.ScheduledJobBase._defaultLogger">
            <summary>
            Default logger, it used when instance logger is not set
            </summary>
        </member>
        <member name="F:Shesha.Scheduler.ScheduledJobBase._instanceLogger">
            <summary>
            Instance logger
            </summary>
        </member>
        <member name="M:Shesha.Scheduler.ScheduledJobBase.ExecuteAsync(System.Guid,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Execute scheduled job
            </summary>
            <param name="executionId">Pre-defined Id of the job execution, is used for the progress tracking</param>
            <param name="startedById">Id of the user who started the job (in case it was started manually)</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Scheduler.ScheduledJobBase.CreateExecutionRecordAsync(System.Guid,System.Action{Shesha.Scheduler.Domain.ScheduledJobExecution})">
            <summary>
            Create execution record
            </summary>
        </member>
        <member name="T:Shesha.Scheduler.ScheduledJobManager">
            inheritedDoc
        </member>
        <member name="M:Shesha.Scheduler.ScheduledJobManager.EnqueueAllAsync">
            inheritedDoc
        </member>
        <member name="M:Shesha.Scheduler.ScheduledJobManager.RunJobAsync(System.Guid,System.Guid,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Scheduler.ScheduledJobManager.GetJobTypeById(System.Guid)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Scheduler.ScheduledJobManager.GetJobInstanceById(System.Guid)">
            inheritedDoc
        </member>
        <member name="P:Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobDto.JobName">
            <summary>
            Name of the scheduled job
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobDto.JobNamespace">
            <summary>
            Namespace
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobDto.JobDescription">
            <summary>
            Description of the job
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobDto.JobStatus">
            <summary>
            Job status (Active/Inactive). Is used to switch job on/off.
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobDto.StartupMode">
            <summary>
            Startup mode (Automatic/Manual)
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobExecutionDto.StartedOn">
            <summary>
            Datetime of the execution start
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobExecutionDto.FinishedOn">
            <summary>
            Datetime of the execution finish
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobExecutionDto.StartedBy">
            <summary>
            User who started the job (if it was done manually)
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobExecutionDto.Job">
            <summary>
            Executed scheduled job
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobExecutionDto.Trigger">
            <summary>
            Trigger by which the job was executed. May be null for manual jobs
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobExecutionDto.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobExecutionDto.Status">
            <summary>
            Status of the execution
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobTriggerDto.ParametersJson">
            <summary>
            Json string to pass parameters to a scheduled job in case want to reuse the same scheduled job but different input parameters         
            </summary>
        </member>
        <member name="T:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobAppService">
            <summary>
            Scheduled Job application service
            </summary>
        </member>
        <member name="M:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobAppService.#ctor(Abp.Domain.Repositories.IRepository{Shesha.Scheduler.Domain.ScheduledJob,System.Guid},Shesha.Scheduler.IScheduledJobManager,Abp.Domain.Repositories.IRepository{Shesha.Scheduler.Domain.ScheduledJob,System.Guid})">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobAppService.StartJobAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Run scheduled job
            </summary>
            <param name="id">Scheduled job Id</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobAppService.EnqueueAll">
            <summary>
            Enqueue all jobs using Hangfire
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobAppService.RunTriggerAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Run scheduled job trigger
            </summary>
            <param name="triggerId">Trigger Id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobAppService.BootstrapScheduledJobs">
            <summary>
            Bootstraps all scheduled jobs and default CRON triggers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobAppService.CreateAsync(Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobDto)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobAppService.UpdateAsync(Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobDto)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobAppService.DeleteAsync(Abp.Application.Services.Dto.EntityDto{System.Guid})">
            inheritedDoc
        </member>
        <member name="M:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobExecutionAppService.GetEventLogItems(System.Guid)">
            <summary>
            Get event log items for the specified job execution
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobExecutionAppService.DownloadLogFileAsync(System.Guid)">
            <summary>
            Download log file of the job execution
            </summary>
            <param name="id">Id of the scheduled job execution</param>
            <returns></returns>
        </member>
        <member name="T:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobTriggerAppService">
            <summary>
            Scheduled Job Trigger application service
            </summary>
        </member>
        <member name="M:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobTriggerAppService.#ctor(Abp.Domain.Repositories.IRepository{Shesha.Scheduler.Domain.ScheduledJobTrigger,System.Guid},Shesha.Scheduler.IScheduledJobManager)">
            <summary>
            Default constructor
            </summary>
            <param name="repository"></param>
            <param name="jobManager"></param>
        </member>
        <member name="M:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobTriggerAppService.CreateAsync(Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobTriggerDto)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobTriggerAppService.UpdateAsync(Shesha.Scheduler.Services.ScheduledJobs.Dto.ScheduledJobTriggerDto)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Scheduler.Services.ScheduledJobs.ScheduledJobTriggerAppService.DeleteAsync(Abp.Application.Services.Dto.EntityDto{System.Guid})">
            inheritedDoc
        </member>
        <member name="M:Shesha.Scheduler.SheshaSchedulerModule.Initialize">
            inheritedDoc
        </member>
        <member name="M:Shesha.Scheduler.SheshaSchedulerModule.PreInitialize">
            inheritedDoc
        </member>
        <member name="T:Shesha.Scheduler.SignalR.EventLogItem">
            <summary>
            Represents event log item logged by <see cref="T:Shesha.Scheduler.SignalR.SignalrAppender"/>
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.SignalR.EventLogItem.Message">
            <summary>
            Logged message
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.SignalR.EventLogItem.TimeStamp">
            <summary>
            Event timestamp
            </summary>
        </member>
        <member name="P:Shesha.Scheduler.SignalR.EventLogItem.Level">
            <summary>
            Level (info/warn/error)
            </summary>
        </member>
        <member name="M:Shesha.Scheduler.SignalR.EventLogItem.#ctor(log4net.Core.LoggingEvent)">
            <summary>
            Creates new 
            </summary>
            <param name="loggingEvent"></param>
        </member>
        <member name="F:Shesha.Scheduler.SignalR.SignalrAppender.GroupName">
            <summary>
            Name of the signalR group
            </summary>
        </member>
        <member name="M:Shesha.Scheduler.SignalR.SignalrAppender.#ctor(Microsoft.AspNetCore.SignalR.IHubContext{Shesha.Scheduler.SignalR.SignalrAppenderHub},System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="hub"></param>
            <param name="groupName"></param>
        </member>
        <member name="M:Shesha.Scheduler.SignalR.SignalrAppender.Append(log4net.Core.LoggingEvent)">
            inheritedDoc
        </member>
        <member name="T:Shesha.Scheduler.SignalR.SignalrAppenderHub">
            <summary>
            SignalR appender hub, is used for real-time job log
            </summary>
        </member>
        <member name="M:Shesha.Scheduler.SignalR.SignalrAppenderHub.JoinGroup(System.String)">
            <summary>
            Join group
            </summary>
            <param name="groupName">Name of the group</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Scheduler.SignalR.SignalrAppenderHub.LeaveGroup(System.String)">
            <summary>
            Leave group
            </summary>
            <param name="groupName">Name of the group</param>
            <returns></returns>
        </member>
        <member name="T:Shesha.Scheduler.Utilities.CronStringHelper">
            <summary>
            CRON string helper
            </summary>
        </member>
        <member name="M:Shesha.Scheduler.Utilities.CronStringHelper.IsValidCronExpression(System.String)">
            <summary>
            Returns true if the specified <paramref name="expression"/> is a valid CRON string
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
    </members>
</doc>
