<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Shesha.Framework</name>
    </assembly>
    <members>
        <member name="F:Shesha.AppConsts.DefaultPassPhrase">
            <summary>
            Default pass phrase for SimpleStringCipher decrypt/encrypt operations
            </summary>
        </member>
        <member name="T:Shesha.Application.Services.Dto.FilteredPagedAndSortedResultRequestDto">
            <summary>
            Filtered, pages and sorted request DTO
            </summary>
        </member>
        <member name="P:Shesha.Application.Services.Dto.FilteredPagedAndSortedResultRequestDto.Filter">
            <summary>
            Filter string in JsonLogic format
            </summary>
        </member>
        <member name="P:Shesha.Application.Services.Dto.FilteredPagedAndSortedResultRequestDto.QuickSearch">
            <summary>
            Quick search string. Is used to search entities by text
            </summary>
        </member>
        <member name="T:Shesha.Application.Services.Dto.GetDynamicEntityInput`1">
            <summary>
            Input that is used to fetch entity data dynamically
            </summary>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="P:Shesha.Application.Services.Dto.GetDynamicEntityInput`1.Properties">
            <summary>
            List of properties to fetch in GraphQL-like syntax. Supports nested properties 
            </summary>
        </member>
        <member name="T:Shesha.Application.Services.Dto.IDynamicDataResult">
            <summary>
            Dynamic data result
            </summary>
        </member>
        <member name="T:Shesha.Application.Services.Dto.IFilteredPagedAndSortedResultRequestDto">
            <summary>
            Standard request of a filtered, paged and sorted list.
            </summary>
        </member>
        <member name="P:Shesha.Application.Services.Dto.IFilteredPagedAndSortedResultRequestDto.Filter">
            <summary>
            Filter string in JsonLogic format
            </summary>
        </member>
        <member name="P:Shesha.Application.Services.Dto.IFilteredPagedAndSortedResultRequestDto.QuickSearch">
            <summary>
            Quick search string. Is used to search entities by text
            </summary>
        </member>
        <member name="T:Shesha.Application.Services.Dto.PropsFilteredPagedAndSortedResultRequestDto">
            <summary>
            Filtered, pages and sorted request DTO with properties list
            </summary>
        </member>
        <member name="P:Shesha.Application.Services.Dto.PropsFilteredPagedAndSortedResultRequestDto.Properties">
            <summary>
            List of properties to fetch in GraphQL-like syntax. Supports nested properties 
            </summary>
        </member>
        <member name="T:Shesha.Application.Services.IEntityAppService">
            <summary>
            Entity application service
            </summary>
        </member>
        <member name="M:Shesha.Application.Services.IEntityAppService.QueryAllAsync(Shesha.Application.Services.Dto.PropsFilteredPagedAndSortedResultRequestDto)">
            <summary>
            Generic entity query
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Application.Services.IEntityAppService`2.QueryAsync(Shesha.Application.Services.Dto.GetDynamicEntityInput{`1})">
            <summary>
            Generic entity query
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.Attributes.ClassUidAttribute">
            <summary>
            Sets an unique Id of the class. Is used for references instead of class name
            </summary>
        </member>
        <member name="P:Shesha.Authorization.Dtos.CustomUserPermissionCacheItem.GrantedPermissions">
            <summary>
            Changed from HashSet to ConcurrentHashSet because of the `Operations that change non-concurrent collections must have exclusive access` exception in `HashSet`1.Contains`
            </summary>
        </member>
        <member name="P:Shesha.Authorization.Dtos.CustomUserPermissionCacheItem.ProhibitedPermissions">
            <summary>
            Changed from HashSet to ConcurrentHashSet because of the `Operations that change non-concurrent collections must have exclusive access` exception in `HashSet`1.Contains`
            </summary>
        </member>
        <member name="T:Shesha.Authorization.IEmailLoginFilter`1">
            <summary>
            Is used to allow/disallow the user to login using email
            </summary>
        </member>
        <member name="M:Shesha.Authorization.IEmailLoginFilter`1.AllowToLoginUsingEmail(System.String,`0)">
            <summary>
            Returns true if the user is able to login using email address instead of username
            </summary>
        </member>
        <member name="T:Shesha.Authorization.IShaPermissionChecker">
            <summary>
            Shesha permission checker
            </summary>
        </member>
        <member name="M:Shesha.Authorization.IShaPermissionChecker.ClearPermissionsCacheForUserAsync(System.Int64,System.Nullable{System.Int32})">
            <summary>
            Clears permissions cache for the specified user
            </summary>
            <param name="userId">Id of the user</param>
            <param name="tenantId">Tenant Id</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Authorization.IShaPermissionChecker.ClearPermissionsCacheAsync">
            <summary>
            Clears permissions cache
            </summary>
        </member>
        <member name="T:Shesha.Authorization.PermissionChecker">
            <summary>
            Permissions checker
            </summary>
        </member>
        <member name="M:Shesha.Authorization.PermissionChecker.#ctor(Shesha.Authorization.Users.UserManager,Abp.Runtime.Caching.ICacheManager,Abp.Domain.Uow.IUnitOfWorkManager)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Shesha.Authorization.PermissionChecker.IsGranted(System.Int64,System.String)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Authorization.PermissionChecker.IsGrantedAsync(System.Int64,System.String)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Authorization.PermissionChecker.IsGrantedCustomAsync(System.Int64,System.String)">
            <summary>
            Indicates is specified <paramref name="permissionName"/> granted to the user with <paramref name="userId"/> or not
            </summary>
            <param name="userId">User Id</param>
            <param name="permissionName">Permission name</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Authorization.PermissionChecker.IsGrantedCustom(System.Int64,System.String)">
            <summary>
            Indicates is specified <paramref name="permissionName"/> granted to the user with <paramref name="userId"/> or not
            </summary>
            <param name="userId">User Id</param>
            <param name="permissionName">Permission name</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Authorization.PermissionChecker.GetPermissionsCacheKey(System.Int64,System.Nullable{System.Int32})">
            <summary>
            Returns cache key that is used to store permissions of the user
            </summary>
            <param name="userId">Id of the user</param>
            <param name="tenantId">Tenant Id</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Authorization.PermissionChecker.ClearPermissionsCacheForUserAsync(System.Int64,System.Nullable{System.Int32})">
            inheritedDoc
        </member>
        <member name="M:Shesha.Authorization.PermissionChecker.ClearPermissionsCacheAsync">
            inheritedDoc
        </member>
        <member name="M:Shesha.Authorization.Roles.RoleManager.GetRoleByName(System.String)">
            <summary>
            Gets a role by given name.
            Throws exception if no role with given roleName.
            </summary>
            <param name="roleName">Role name</param>
            <returns>Role</returns>
            <exception cref="T:Abp.AbpException">Throws exception if no role with given roleName</exception>
        </member>
        <member name="T:Shesha.Authorization.ShaPermissionNames">
            <summary>
            Shesha Permission names
            </summary>
        </member>
        <member name="F:Shesha.Authorization.ShaPermissionNames.Application_Configurator">
            <summary>
            Application Configurator
            </summary>
        </member>
        <member name="P:Shesha.Authorization.Users.User.EmailAddress">
            <summary>
            Email address of the user.
            Email address must be unique for it's tenant.
            </summary>
        </member>
        <member name="P:Shesha.Authorization.Users.User.OtpEnabled">
            <summary>
            One Time Passwords by SMS
            </summary>
        </member>
        <member name="P:Shesha.Authorization.Users.User.IsActive">
            <summary>
            Is this user active?
            If as user is not active, he/she can not use the application.
            </summary>
        </member>
        <member name="M:Shesha.Authorization.Users.UserManager.RemoveFromRoleAsync(Shesha.Authorization.Users.User,System.String)">
            <summary>
            Removes the specified <paramref name="user" /> from the named role.
            </summary>
            <param name="user">The user to remove from the named role.</param>
            <param name="role">The name of the role to remove the user from.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        </member>
        <member name="M:Shesha.Authorization.Users.UserManager.CreateUser(System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a User Account with basic user details and default roles.
            </summary>
            <param name="username"></param>
            <param name="createLocalPassword"></param>
            <param name="password"></param>
            <param name="passwordConfirmation"></param>
            <param name="firstname"></param>
            <param name="lastname"></param>
            <param name="mobileNumber"></param>
            <param name="emailAddress"></param>
            <returns>Returns the User object representing the newly created User Account. If parameters were incorrect will through 
            a AbpValidationException exception that can be allowed through to the calling web app.</returns>
        </member>
        <member name="M:Shesha.Authorization.Users.UserManager.UserNameAlreadyInUse(System.String)">
            <summary>
            Checks is specified username already used by another person
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shesha.AutoMapper.AutoMapperExtensions.MapReferenceListValuesToDto``2(AutoMapper.IMappingExpression{``0,``1})">
            <summary>
            Maps all reference list properties of the source type to <see cref="T:Shesha.AutoMapper.Dto.ReferenceListItemValueDto"/> of the destination type
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.AutoMapper.AutoMapperExtensions.MapReferenceListValuesFromDto``2(AutoMapper.IMappingExpression{``0,``1})">
            <summary>
            Maps all <see cref="T:Shesha.AutoMapper.Dto.ReferenceListItemValueDto"/> properties of the source type to reference list values in the destination type
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.AutoMapper.AutoMapperExtensions.MapMultiValueReferenceListValuesToDto(AutoMapper.IMappingExpression,System.Type,System.Type)">
            <summary>
            Map multivalue reference list values from a singe value to decomposed list
            </summary>
        </member>
        <member name="M:Shesha.AutoMapper.AutoMapperExtensions.MapMultiValueReferenceListValuesFromDto(AutoMapper.IMappingExpression,System.Type,System.Type)">
            <summary>
            Map multivalue reference list values from decomposed list to a single value
            </summary>
        </member>
        <member name="T:Shesha.AutoMapper.Dto.AutocompleteItemDto">
            <summary>
            Generic DTO of the simple autocomplete item
            </summary>
        </member>
        <member name="T:Shesha.AutoMapper.Dto.ChildEntityDto`1">
            <summary>
            Generic Dto for an entity that has an link to other entity as owner
            </summary>
        </member>
        <member name="P:Shesha.AutoMapper.Dto.ChildEntityDto`1.OwnerId">
            <summary>
            Id of the owning entity
            </summary>
        </member>
        <member name="P:Shesha.AutoMapper.Dto.ChildEntityDto`1.OwnerType">
            <summary>
            Type short alias of the owning entity
            </summary>
        </member>
        <member name="T:Shesha.AutoMapper.Dto.ChildEntityGetListInputDto">
            <summary>
            Generic Dto for getting list of child entities by owner
            </summary>
        </member>
        <member name="P:Shesha.AutoMapper.Dto.ChildEntityGetListInputDto.OwnerId">
            <summary>
            Id of the owner entity
            </summary>
        </member>
        <member name="P:Shesha.AutoMapper.Dto.ChildEntityGetListInputDto.OwnerType">
            <summary>
            Type short alias of the owner entity
            </summary>
        </member>
        <member name="T:Shesha.AutoMapper.Dto.EntityLinkDto">
            <summary>
            Generic Dto for an entity link
            </summary>
        </member>
        <member name="P:Shesha.AutoMapper.Dto.EntityLinkDto.EntityId">
            <summary>
            Id of the entity
            </summary>
        </member>
        <member name="P:Shesha.AutoMapper.Dto.EntityLinkDto.EntityType">
            <summary>
            Type short alias of the entity
            </summary>
        </member>
        <member name="T:Shesha.AutoMapper.Dto.EntityWithDisplayNameDto`1">
            <summary>
            Generic entity Dto with display text
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="M:Shesha.AutoMapper.Dto.EntityWithDisplayNameDto`1.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:Shesha.AutoMapper.Dto.EntityWithDisplayNameDto`1.#ctor(`0,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Shesha.AutoMapper.Dto.EntityWithDisplayNameDto`1.DisplayText">
            <summary>
            Entity display name
            </summary>
        </member>
        <member name="T:Shesha.AutoMapper.EntityLinkCollectionConverter`3">
            <summary>
            Entity list update after receiving the list of EntityLinks from client. Note: OwnerKey+OwnerId is the key here, this is not to be used for cases when Id is the key
            </summary>
        </member>
        <member name="M:Shesha.AutoMapper.EntityLinkCollectionConverter`3.Convert(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1},AutoMapper.ResolutionContext)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Shesha.Bootstrappers.IBootstrapper">
            <summary>
            Bootstrapper interface
            </summary>
        </member>
        <member name="M:Shesha.Bootstrappers.IBootstrapper.Process">
            <summary>
            Body of the bootstrapper
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shesha.ConfigurationItems.ConfigurableModuleAttribute">
            <summary>
            Configurable module attribute
            </summary>
        </member>
        <member name="T:Shesha.ConfigurationItems.ConfigurableModuleBootstrapper">
            <summary>
            Configurable modules bootstrapper
            </summary>
        </member>
        <member name="T:Shesha.ConfigurationItems.ConfigurationFrameworkMiddleware">
            <summary>
            Configuration framework middleware
            </summary>
        </member>
        <member name="T:Shesha.ConfigurationItems.ConfigurationFrameworkRuntime">
            <summary>
            Configuration framework runtime
            </summary>
        </member>
        <member name="P:Shesha.ConfigurationItems.ConfigurationFrameworkRuntime.ViewMode">
            inheritedDoc
        </member>
        <member name="M:Shesha.ConfigurationItems.ConfigurationFrameworkRuntime.BeginScope(System.Action{Shesha.ConfigurationItems.ConfigurationFrameworkRuntimeState})">
            inheritedDoc
        </member>
        <member name="T:Shesha.ConfigurationItems.ConfigurationFrameworkRuntimeState">
            <summary>
            Configuration Framework runtime state
            </summary>
        </member>
        <member name="P:Shesha.ConfigurationItems.ConfigurationFrameworkRuntimeState.ViewMode">
            <summary>
            View mode
            </summary>
        </member>
        <member name="T:Shesha.ConfigurationItems.ConfigurationItemManager`1">
            <summary>
            Base class of the Configuration Item Manager
            </summary>
        </member>
        <member name="T:Shesha.ConfigurationItems.IConfigurationFrameworkRuntime">
            <summary>
            Configuration framework runtime
            </summary>
        </member>
        <member name="P:Shesha.ConfigurationItems.IConfigurationFrameworkRuntime.ViewMode">
            <summary>
            View mode (live/ready/latest)
            </summary>
        </member>
        <member name="M:Shesha.ConfigurationItems.IConfigurationFrameworkRuntime.BeginScope(System.Action{Shesha.ConfigurationItems.ConfigurationFrameworkRuntimeState})">
            <summary>
            Begin runtime scope
            </summary>
            <param name="initAction">Initialization of the scope</param>
            <returns></returns>
        </member>
        <member name="T:Shesha.ConfigurationItems.IConfigurationItem">
            <summary>
            Interface of the configuration item
            </summary>
        </member>
        <member name="P:Shesha.ConfigurationItems.IConfigurationItem.ItemType">
            <summary>
            Configuration item type
            </summary>
        </member>
        <member name="M:Shesha.ConfigurationItems.IConfigurationItem.GetDependencies">
            <summary>
            Get dependencies of current configuration item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shesha.ConfigurationItems.IConfigurationItemManager`1">
            <summary>
            Interface of the Configuration Item Manager
            </summary>
        </member>
        <member name="M:Shesha.ConfigurationItems.IConfigurationItemManager`1.ImportFileAsync(System.IO.Stream)">
            <summary>
            Import all items from JSON file
            </summary>
            <param name="contentStream"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.ConfigurationItems.IConfigurationItemManager`1.ImportItemAsync(System.String)">
            <summary>
            Import configuration item in JSON format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shesha.ConfigurationItems.IConfigurationItemManager`1.ExportItemAsync(`0)">
            <summary>
            Export configuration item in JSON format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shesha.ConfigurationItems.IConfigurationItemManager`1.ExportFileAsync">
            <summary>
            Export all items to JSON
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shesha.ConfigurationItems.IFileProcessor">
            <summary>
            File processor
            </summary>
        </member>
        <member name="P:Shesha.ConfigurationItems.IFileProcessor.Name">
            <summary>
            Name of the file processor
            </summary>
        </member>
        <member name="P:Shesha.ConfigurationItems.IFileProcessor.Description">
            <summary>
            Description of the file processor
            </summary>
        </member>
        <member name="M:Shesha.ConfigurationItems.IFileProcessor.CanProcessFileName(System.String)">
            <summary>
            Returns true if the current file processor supports processing of file with specified <paramref name="fileName"/>
            </summary>
            <param name="fileName">File name</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.ConfigurationItems.IFileProcessor.CanProcessFileContent(System.IO.Stream)">
            <summary>
            Returns true if the current file processor can process specified file content
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.ConfigurationItems.IVersionedConfigurationItem">
            <summary>
            Versioned configuration item
            </summary>
        </member>
        <member name="T:Shesha.ConfigurationItems.Models.ConfigurationItemViewMode">
            <summary>
            Configuration item view mode. Is used to define the rules of configuration items visibility
            </summary>
        </member>
        <member name="P:Shesha.Configuration.ISheshaSettings.UploadFolder">
            <summary>
            Upload Folder
            </summary>
        </member>
        <member name="P:Shesha.Configuration.ISheshaSettings.ExchangeName">
            <summary>
            RabbitMq Exchange
            </summary>
        </member>
        <member name="T:Shesha.Configuration.Runtime.EntityConfiguration">
            <summary>
            Provides configuration information on Domain Model entities
            required at Run-time.
            </summary>
        </member>
        <member name="P:Shesha.Configuration.Runtime.EntityConfiguration.DisplayNamePropertyInfo">
            <summary>
            The name of the property that will be used to display the entity to the user.
            </summary>
        </member>
        <member name="P:Shesha.Configuration.Runtime.EntityConfiguration.TypeShortAlias">
            <summary>
            Type short alias of the entity type (see <see cref="T:Shesha.Domain.Attributes.EntityAttribute"/>)
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Thrown when entity has no TypeShortAlias</exception>
        </member>
        <member name="P:Shesha.Configuration.Runtime.EntityConfiguration.ApplicationServiceType">
            <summary>
            Type of the default application service
            </summary>
        </member>
        <member name="T:Shesha.Configuration.Runtime.EntityConfigurationLoaderByReflection">
            <summary>
            Loads entity configuration information using reflection.
            </summary>
        </member>
        <member name="T:Shesha.Configuration.Runtime.EntityConfigurationStore">
            <summary>
            Entity configuration store
            </summary>
        </member>
        <member name="M:Shesha.Configuration.Runtime.EntityConfigurationStore.GetOrNull(System.String)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Configuration.Runtime.EntityConfigurationStore.Get(System.String)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Configuration.Runtime.EntityConfigurationStore.Get(System.Type)">
            inheritedDoc
        </member>
        <member name="T:Shesha.Configuration.Runtime.EntityConstants">
            <summary>
            Contains standard names of fields/properties
            </summary>
        </member>
        <member name="F:Shesha.Configuration.Runtime.EntityConstants.DisplayNameField">
            <summary>
            Service field that is identified as a display name and the entity
            </summary>
        </member>
        <member name="T:Shesha.Configuration.Runtime.EntityMappingMetadata">
            <summary>
            Stores information about mapping of entity to the database
            </summary>
        </member>
        <member name="T:Shesha.Configuration.Runtime.Exceptions.DuplicatedTypeShortAliasesException">
            <summary>
            Duplicated TypeShortAlises exception
            </summary>
        </member>
        <member name="T:Shesha.Configuration.Runtime.Exceptions.EntityDisplayNameNotFoundException">
            <summary>
            Exception indicates that the display name property is required for the requested entity type
            </summary>
        </member>
        <member name="T:Shesha.Configuration.Runtime.Exceptions.EntityTypeNotFoundException">
            <summary>
            Entity type not found exception
            </summary>
        </member>
        <member name="T:Shesha.Configuration.Runtime.GeneralDataType">
            <summary>
            General data type
            </summary>
        </member>
        <member name="T:Shesha.Configuration.Runtime.IEntityConfigurationStore">
            <summary>
            Stores information about entities
            </summary>
        </member>
        <member name="M:Shesha.Configuration.Runtime.IEntityConfigurationStore.Get(System.Type)">
            <summary>
            Returns <see cref="T:Shesha.Configuration.Runtime.EntityConfiguration"/> by entity type
            </summary>
        </member>
        <member name="M:Shesha.Configuration.Runtime.IEntityConfigurationStore.Get(System.String)">
            <summary>
            Returns <see cref="T:Shesha.Configuration.Runtime.EntityConfiguration"/> by class name or type short alias
            </summary>
        </member>
        <member name="M:Shesha.Configuration.Runtime.IEntityConfigurationStore.GetOrNull(System.String)">
            <summary>
            Returns <see cref="T:Shesha.Configuration.Runtime.EntityConfiguration"/> by class name or type short alias
            </summary>
        </member>
        <member name="M:Shesha.Configuration.Runtime.IEntityConfigurationStore.SetDefaultAppService(System.Type,System.Type)">
            <summary>
            Register default application service for entity type
            </summary>
            <param name="entityType"></param>
            <param name="applicationServiceType"></param>
        </member>
        <member name="T:Shesha.Configuration.Runtime.PropertyConfiguration">
            <summary>
            Provides Metadata/Configuration information for Entity properties
            </summary>
        </member>
        <member name="P:Shesha.Configuration.Runtime.PropertyConfiguration.ReferenceListNamespace">
            <summary>
            If the property is a ReferenceList, gets or sets the namespace of the reference list.
            </summary>
        </member>
        <member name="P:Shesha.Configuration.Runtime.PropertyConfiguration.ReferenceListOrderByName">
            <summary>
            If true, indicates that referencelist items should be sorted by name.
            </summary>
        </member>
        <member name="P:Shesha.Configuration.Runtime.PropertyConfiguration.ReferenceListName">
            <summary>
            If the property is a ReferenceList, gets or sets the name of the reference list.
            </summary>
        </member>
        <member name="P:Shesha.Configuration.Runtime.PropertyConfiguration.EnumType">
            <summary>
            Returns the Type of the enum referenced by the property
            </summary>
        </member>
        <member name="P:Shesha.Configuration.Runtime.PropertyConfiguration.EntityReferenceType">
            <summary>
            Returns the Type of the entity referenced by the property, either directly or through an Id
            provided by a property marked with an EntityReference attribute.
            </summary>
        </member>
        <member name="P:Shesha.Configuration.Runtime.PropertyConfiguration.BackingSearchProperty">
            <summary>
            Name of the property to which any searches will be redirected. 
            E.g. this is useful if the property itself is calculated and therefore not persited to the DB
            and therefore cannot be queried.
            </summary>
        </member>
        <member name="P:Shesha.Configuration.Runtime.PropertyConfiguration.Label">
            <summary>
            Label for the property.
            </summary>
        </member>
        <member name="P:Shesha.Configuration.Runtime.PropertyConfiguration.AuditLogEntryNamespaceOnChange">
            <summary>
            Provides a categorisation of the type of change logged.
            </summary>
        </member>
        <member name="P:Shesha.Configuration.Runtime.PropertyConfiguration.IsMapped">
            <summary>
            If true, indicates that the property is mapped to the field of the DB table/view
            </summary>
        </member>
        <member name="T:Shesha.Configuration.SettingManagerExtensions">
            <summary>
            Extensions of the <see cref="T:Abp.Configuration.ISettingManager"/>
            </summary>
        </member>
        <member name="M:Shesha.Configuration.SettingManagerExtensions.ChangeSettingAsync(Abp.Configuration.ISettingManager,System.String,System.String)">
            <summary>
            Changes setting for tenant with fallback to application
            </summary>
            <param name="name">Setting name</param>
            <param name="value">Setting value</param>
        </member>
        <member name="M:Shesha.Configuration.SettingManagerExtensions.ChangeSetting(Abp.Configuration.ISettingManager,System.String,System.String)">
            <summary>
            Changes setting for tenant with fallback to application
            </summary>
            <param name="name">Setting name</param>
            <param name="value">Setting value</param>
        </member>
        <member name="P:Shesha.Configuration.SheshaSettings.UploadFolder">
            <summary>
            Upload folder for stored files (<see cref="T:Shesha.Domain.StoredFile"/>) 
            </summary>
        </member>
        <member name="P:Shesha.Configuration.SheshaSettings.AutoLogoffTimeout">
            <summary>
            Auto logoff timeout (0 - disabled)
            </summary>
        </member>
        <member name="T:Shesha.Controllers.Dtos.ExecuteHqlInput">
            <summary>
            Execute HQL input
            </summary>
        </member>
        <member name="M:Shesha.Controllers.FrameworkController.TestEntities">
            <summary>
            NOTE: to be removed
            </summary>
        </member>
        <member name="T:Shesha.Domain.Attributes.AllowInheritedAttribute">
            <summary>
            Is used on one-to-many properties. If the property marked with this attribute the system allows to use inherited entities as a value. 
            </summary>
        </member>
        <member name="T:Shesha.Domain.Attributes.DiscriminatorAttribute">
            <summary>
            Instruct persistence layer to use `Table Per Class Hierarchy` (TPH) mapping strategy
            Entity is mapped as a subclass with discriminator
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.DiscriminatorAttribute.DiscriminatorColumn">
            <summary>
            Name of the discriminator column
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.DiscriminatorAttribute.UseDiscriminator">
            <summary>
            If true, indicates that entity uses discriminator
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.DiscriminatorAttribute.FilterUnknownDiscriminators">
            <summary>
            If true, indicates that the ORM should filter out rows with unknown discriminator values
            </summary>
        </member>
        <member name="T:Shesha.Domain.Attributes.EntityAttribute">
            <summary>
            Provides metadata to a domain entity
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.EntityAttribute.FriendlyName">
            <summary>
            Specifies friendly name of the entity that should be shown to user when required
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.EntityAttribute.TypeShortAlias">
            <summary>
            This is a short version of the Type name of the entity class that is unique within 
            all the entities in the current solution. 
            The Alias must be 50 characters long or less. This is also typically match
            the Discriminator value defined for the entity on NHibernate mapping if the entity
            is a subclass of another entity.
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.EntityAttribute.GenerateApplicationService">
            <summary>
            If true, indicates that an Application Service should be generated automatically for this entity. True by default
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.EntityAttribute.ApplicationServiceName">
            <summary>
            Name of the auto-generated applicaiton service, applicable only when <see cref="P:Shesha.Domain.Attributes.EntityAttribute.GenerateApplicationService"/> is true. Leave empty to use class name as a name of the applicaiton service
            </summary>
        </member>
        <member name="T:Shesha.Domain.Attributes.EntityDisplayNameAttribute">
            <summary>
            Attribute used to identify the property within an entity class that 
            can be used as a name/description identifying the entity to a user.
            Only one property per entity class should be decorated with this attribute.
            </summary>
        </member>
        <member name="T:Shesha.Domain.Attributes.EntityPickerDialogAttribute">
            <summary>
            Forces the system to use EntityPickerDialog control for editing of the property.
            </summary>
        </member>
        <member name="M:Shesha.Domain.Attributes.EntityPickerDialogAttribute.#ctor">
            <summary>
            Forces the system to use EntityPickerDialog control for editing of the property. Default configuration will be used
            </summary>
        </member>
        <member name="M:Shesha.Domain.Attributes.EntityPickerDialogAttribute.#ctor(System.String)">
            <summary>
            Forces the system to use EntityPickerDialog control for editing of the property.
            </summary>
            <param name="pickerDialogId">Id of the picker dialog configuration</param>
        </member>
        <member name="T:Shesha.Domain.Attributes.ImMutableAttribute">
            <summary>
            Indicates that the entity is immutable (readonly). Is used for entities mapped to views
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Shesha.Domain.Attributes.ManyToManyAttribute" -->
        <member name="P:Shesha.Domain.Attributes.ManyToManyAttribute.Table">
            <summary>
            It can be set either to the table you link to or the intermediate link table (only if it has a mapping)
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.ManyToManyAttribute.ChildColumn">
            <summary>
            Column to filter by
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.ManyToManyAttribute.KeyColumn">
            <summary>
            Column to load entity from
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.ManyToManyAttribute.Where">
            <summary>
            SQL Filter
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.ManyToManyAttribute.OrderBy">
            <summary>
            SQL Order By clause
            </summary>
        </member>
        <member name="T:Shesha.Domain.Attributes.MultiValueReferenceListAttribute">
            <summary>
            Attribute used to decorate any domain object property which may store
            zero to many values from a specified Reference List.
            </summary>
        </member>
        <member name="M:Shesha.Domain.Attributes.MultiValueReferenceListAttribute.GetReferenceListIdentifier">
            <summary>
            Returns <see cref="T:Shesha.Domain.ReferenceListIdentifier"/> with current name and namespace
            </summary>
        </member>
        <member name="M:Shesha.Domain.Attributes.MultiValueReferenceListAttribute.IsBitFlagProperty(System.Reflection.PropertyInfo)">
            <summary>
            If the property that this attribute is set on then see if it is of type int? or int which indicates
            that its value is a bitflag
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Domain.Attributes.MultiValueReferenceListAttribute.ExtractBitFlagValues(System.Nullable{System.UInt32})">
            <summary>
            Convert a bitflag value to a pipe delimited set of constituent values
            </summary>
            <param name="bitFlagValue">A nullable int bitflagValue</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Domain.Attributes.MultiValueReferenceListAttribute.ExtractBitFlagValues(System.UInt32)">
            <summary>
            Convert a bitflag value to a pipe delimited set of constituent values
            </summary>
            <param name="bitFlagValue">bitflagValue</param>
            <returns></returns>
        </member>
        <member name="T:Shesha.Domain.Attributes.OneToOneAttribute">
            <summary>
            Attribute for identification of many-to-many relations. 
            </summary>
        </member>
        <member name="T:Shesha.Domain.Attributes.PrecisionAndScaleAttribute">
            <summary>
            The Precision class allows us to decorate our Entity Models with a Precision attribute 
            to specify decimal precision values for the database column
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.PrecisionAndScaleAttribute.Precision">
            <summary>
            The total number of digits to store, including decimals
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.PrecisionAndScaleAttribute.Scale">
            <summary>
            The number of digits from the precision to be used for decimals
            </summary>
        </member>
        <member name="M:Shesha.Domain.Attributes.PrecisionAndScaleAttribute.#ctor(System.Byte,System.Byte)">
            <summary>
            Define the precision and scale of a decimal data type
            </summary>
            <param name="precision">The total number of digits to store, including decimals</param>
            <param name="scale">The number of digits from the precision to be used for decimals</param>
        </member>
        <member name="T:Shesha.Domain.Attributes.PrefixAttribute">
            <summary>
            Switches off prefix for target properties
            </summary>
        </member>
        <member name="T:Shesha.Domain.Attributes.ReadonlyPropertyAttribute">
            <summary>
            Allows to define insertion and updating rules. Is used for one-way fields (e.g. FullName is calculated on the server and we can't insert update it)
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.ReadonlyPropertyAttribute.Insert">
            <summary>
            If true, NH will include this property to the insert sql 
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.ReadonlyPropertyAttribute.Update">
            <summary>
            If true, NH will include this property to the update sql 
            </summary>
        </member>
        <member name="T:Shesha.Domain.Attributes.ReferenceListAttribute">
            <summary>
            Attribute used to decorate any domain object property whose values
            should be restricted to the values of a Reference List.
            </summary>
        </member>
        <member name="P:Shesha.Domain.Attributes.ReferenceListAttribute.ParentListItemProperty">
            <summary>
            If the property the attribute is applied identifies a sub-reference list item to another Reference
            List property, this indicates the name of the parent property name.
            </summary>
        </member>
        <member name="M:Shesha.Domain.Attributes.ReferenceListAttribute.GetReferenceListIdentifier">
            <summary>
            Returns <see cref="T:Shesha.Domain.ReferenceListIdentifier"/> with current name and namespace
            </summary>
        </member>
        <member name="T:Shesha.Domain.Attributes.SaveAsJsonAttribute">
            <summary>
            Attribute for identifying entity properties which are supposed to be saved as JSON strings in the db.
            </summary>
        </member>
        <member name="T:Shesha.Domain.Attributes.StoredFileAttribute">
            <summary>
            Parameters of the Stored File property which are used for initialization
            </summary>
        </member>
        <member name="T:Shesha.Domain.ConfigurationItemBase">
            <summary>
            Configuration item base
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItemBase.Configuration">
            <summary>
            Configuration item base info
            </summary>
        </member>
        <member name="T:Shesha.Domain.ConfigurationItems.ConfigurationItem">
            <summary>
            Configuration Item
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.ConfigurationItem.Origin">
            <summary>
            The Guid for the Config Item.
            Different versions for the same Config Item will share this Id which the very first version of the item will be responsible for generating.
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.ConfigurationItem.Name">
            <summary>
            Item name
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.ConfigurationItem.Label">
            <summary>
            Label of the con
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.ConfigurationItem.ItemType">
            <summary>
            Item name
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.ConfigurationItem.Description">
            <summary>
            Item description
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.ConfigurationItem.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.ConfigurationItem.BaseItem">
            <summary>
            Base item. Is used if the current item is inherited from another one
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.ConfigurationItem.VersionNo">
            <summary>
            Version number
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.ConfigurationItem.VersionStatus">
            <summary>
            Version status (Draft/In Progress/Live etc.)
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.ConfigurationItem.ParentVersion">
            <summary>
            Parent version. Note: version may have more than one child versions (e.g. new version was created and then cancelled, in this case a new version should be created in the same parent)
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.ConfigurationItem.CreatedByImport">
            <summary>
            Import session that created this configuration item
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.ConfigurationItem.TenantId">
            <summary>
            Tenant ID or null for no tenant
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.ConfigurationItem.IsLast">
            <summary>
            If true, indicates that this is a last version of the configuration item
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.ConfigurationItem.Suppress">
            <summary>
            If true, it means that the item will not be visible to Config or End-users/Admins.
            </summary>
        </member>
        <member name="T:Shesha.Domain.ConfigurationItems.ConfigurationItemVersionStatus">
            <summary>
            Status of the <see cref="T:Shesha.Domain.ConfigurationItems.ConfigurationItem"/>
            </summary>
        </member>
        <member name="F:Shesha.Domain.ConfigurationItems.ConfigurationItemVersionStatus.Draft">
            <summary>
            Version is still a work in progress
            </summary>
        </member>
        <member name="F:Shesha.Domain.ConfigurationItems.ConfigurationItemVersionStatus.Ready">
            <summary>
            Configuration changes for this version have been completed but is awaiting to made live
            </summary>
        </member>
        <member name="F:Shesha.Domain.ConfigurationItems.ConfigurationItemVersionStatus.Live">
            <summary>
            Version is currently Live
            </summary>
        </member>
        <member name="F:Shesha.Domain.ConfigurationItems.ConfigurationItemVersionStatus.Cancelled">
            <summary>
            Version was set to ‘Ready’ but was decided that it should not go live
            </summary>
        </member>
        <member name="F:Shesha.Domain.ConfigurationItems.ConfigurationItemVersionStatus.Retired">
            <summary>
            Version was previously Live but has been retired
            </summary>
        </member>
        <member name="T:Shesha.Domain.ConfigurationItems.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.Module.Name">
            <summary>
            Module name
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.Module.Description">
            <summary>
            Module description
            </summary>
        </member>
        <member name="P:Shesha.Domain.ConfigurationItems.Module.IsEnabled">
            <summary>
            If true, indicates that the module is enabled
            </summary>
        </member>
        <member name="T:Shesha.Domain.EntityConfig">
            <summary>
            Entity configuration
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityConfig.Source">
            <summary>
            Source of the entity (code/user)
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityConfig.PropertiesMD5">
            <summary>
            MD5 hash of the hardcoded properties, is used for performance optimization of the bootstrapper
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityConfig.Configuration">
            <summary>
            Configuration item base info
            </summary>
        </member>
        <member name="T:Shesha.Domain.EntityHelper">
            <summary>
            Entity Helper
            </summary>
        </member>
        <member name="M:Shesha.Domain.EntityHelper.RefreshStore(Abp.Dependency.IIocManager)">
            <summary>
            Refresh configuration store instance using provided <paramref name="iocManager"/>. Note: for internal usage and unit-tests only
            </summary>
            <param name="iocManager"></param>
        </member>
        <member name="M:Shesha.Domain.EntityHelper.GetEntityConfiguration(System.String)">
            <summary>
            Get entity configuration by type short alias
            </summary>
        </member>
        <member name="M:Shesha.Domain.EntityHelper.GetEntityConfiguration(System.Type)">
            <summary>
            Get entity configuration by entity type
            </summary>
        </member>
        <member name="T:Shesha.Domain.EntityProperty">
            <summary>
            Configuration of the entity property
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.EntityConfig">
            <summary>
            Owner entity config
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.Name">
            <summary>
            Property Name
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.Label">
            <summary>
            Label (display name)
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.DataType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.DataFormat">
            <summary>
            Data format
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.EntityType">
            <summary>
            Entity type. Aplicable for entity references
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.ReferenceListName">
            <summary>
            Reference list name
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.ReferenceListNamespace">
            <summary>
            Reference list namespace
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.Source">
            <summary>
            Source of the property (code/user)
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.SortOrder">
            <summary>
            Default sort order
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.ParentProperty">
            <summary>
            Parent property
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.Properties">
            <summary>
            Child properties (applicable for objects)
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.ItemsType">
            <summary>
            Items type (applicable for arrays)
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.IsFrameworkRelated">
            <summary>
            If true, indicates that current property is a framework-related (e.g. <see cref="P:Abp.Domain.Entities.ISoftDelete.IsDeleted"/>, <see cref="P:Abp.Domain.Entities.Auditing.IHasModificationTime.LastModificationTime"/>)
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.Suppress">
            <summary>
            If true, the property is not returned from Get end-points and is ignored if submitted on Create/Update end-points
            The property should also not be listed on the form configurator property list
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.Required">
            <summary>
            Indicates if a property value is required in order to save
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.ReadOnly">
            <summary>
            If true, the property cannot be edited via the dynamically generated create/update end-points:
            - property should not be listed on create/update end-points
            - should be set to 'True' and not editable for read-only properties of domain classes
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.Audited">
            <summary>
            Equivalent to Audited attribute on the property
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.Min">
            <summary>
            Validation min
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.Max">
            <summary>
            Validation max
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.MinLength">
            <summary>
            Validation min length
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.MaxLength">
            <summary>
            Validation max length
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.RegExp">
            <summary>
            Validation RegularExpression 
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityProperty.ValidationMessage">
            <summary>
            Validation message
            </summary>
        </member>
        <member name="T:Shesha.Domain.EntityPropertyValue">
            <summary>
            Entity property value (initially for Dynamic properties)
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityPropertyValue.EntityProperty">
            <summary>
            Owner entity property
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityPropertyValue.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="T:Shesha.Domain.EntityVisibility">
            <summary>
            Defines a list of user groups (Person/ShaRole/DistributionList/...) that can see the original entity.
            </summary>
        </member>
        <member name="P:Shesha.Domain.EntityVisibility.EntityAccess">
            <summary>
            Access rights for GrantedToEntityId on EntityId
            </summary>
        </member>
        <member name="T:Shesha.Domain.Enums.MetadataSourceType">
            <summary>
            Indicate the source of the entity/property metadata 
            </summary>
        </member>
        <member name="T:Shesha.Domain.Enums.RefListEntityAccess">
            <summary>
            Filter expression type
            </summary>
        </member>
        <member name="F:Shesha.Domain.Enums.RefListEntityAccess.NoAccess">
            <summary>
            No access
            </summary>
        </member>
        <member name="F:Shesha.Domain.Enums.RefListEntityAccess.ReadAccess">
            <summary>
            Read access
            </summary>
        </member>
        <member name="F:Shesha.Domain.Enums.RefListEntityAccess.WriteAccess">
            <summary>
            Write access
            </summary>
        </member>
        <member name="F:Shesha.Domain.Enums.RefListEntityAccess.FullAccess">
            <summary>
            Full access
            </summary>
        </member>
        <member name="T:Shesha.Domain.Enums.RefListFilterComparerType">
            <summary>
            todo: merge with FilterOperator
            </summary>
        </member>
        <member name="T:Shesha.Domain.Enums.RefListFilterJoinOperator">
            <summary>
            Operator to use for joining 2 filters (and/or)
            </summary>
        </member>
        <member name="F:Shesha.Domain.Enums.RefListFilterJoinOperator.And">
            <summary>
            AND
            </summary>
        </member>
        <member name="F:Shesha.Domain.Enums.RefListFilterJoinOperator.Or">
            <summary>
            OR
            </summary>
        </member>
        <member name="T:Shesha.Domain.Enums.RefListFilterExpressionType">
            <summary>
            Filter expression type
            </summary>
        </member>
        <member name="F:Shesha.Domain.Enums.RefListFilterExpressionType.Hql">
            <summary>
            HQL (either hand-written or built with JsonLogic)
            </summary>
        </member>
        <member name="F:Shesha.Domain.Enums.RefListFilterExpressionType.JsonLogic">
            <summary>
            JsonLogic expression. It can be converted to HQL when needed
            </summary>
        </member>
        <member name="F:Shesha.Domain.Enums.RefListFilterExpressionType.Column">
            <summary>
            A filter for a single column. Mostly used in the reporting framework for stuff like the following: filtering the report data to only show data from current user's unit.
            </summary>
        </member>
        <member name="F:Shesha.Domain.Enums.RefListFilterExpressionType.LegacyAdvanced">
            <summary>
            Used for saved Advanced filters or sub-filters, also used in the reporting framework and can be used for reusable HQL queries
            </summary>
        </member>
        <member name="F:Shesha.Domain.Enums.RefListFilterExpressionType.CodeFilter">
            <summary>
            Code filters (see ICustomStoredFilterRegistration)
            </summary>
        </member>
        <member name="M:Shesha.Domain.FilterCriteria.AppendCriteria(Shesha.Domain.FilterCriteria)">
            <summary>
            Copies all the <paramref name="criteria"/>'s FilterClauses and FilterParameters to this
            FilterCriteria.
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:Shesha.Domain.FilterCriteria.AddParameterisedCriterion(System.String,System.Object)">
            <summary>
            Adds a criterion to the criteria.
            </summary>
            <param name="criterionPattern">String specifying the criterion e.g. 'ent.PropertyName = {0}'
            where:
            - it is assumed that ent is the alias assigned to the root entity being queried.
            - {0} indicates the position where the parameter will be inserted. The parameter name will be automatically assigned.</param>
            <param name="parameterValue">The parameter value.</param>
        </member>
        <member name="T:Shesha.Domain.FlatReferenceListItem">
            <summary>
            Flattened Reference List items
            </summary>
        </member>
        <member name="P:Shesha.Domain.FlatReferenceListItem.ReferenceListFullName">
            <summary>
            Full name of the reference list in dot notation
            </summary>
        </member>
        <member name="P:Shesha.Domain.FlatReferenceListItem.Item">
            <summary>
            Item text
            </summary>
        </member>
        <member name="P:Shesha.Domain.FlatReferenceListItem.ItemValue">
            <summary>
            Item value
            </summary>
        </member>
        <member name="P:Shesha.Domain.FlatReferenceListItem.TenantId">
            <summary>
            Tenant id
            </summary>
        </member>
        <member name="T:Shesha.Domain.FrontEndApp">
            <summary>
            A Front-end App represents the various front-end applications that build off this back-end. 
            For example, Admin Portal, Customer Portal, Customer Mobile App would be fairly typical examples.
            </summary>
        </member>
        <member name="P:Shesha.Domain.FrontEndApp.Name">
            <summary>
            Name of the front-end app.
            </summary>
        </member>
        <member name="P:Shesha.Domain.FrontEndApp.Description">
            <summary>
            Description of the Front-end application.
            </summary>
        </member>
        <member name="T:Shesha.Domain.FullAuditedEntityWithExternalSync`1">
            <summary>
            Full audited entity that supports synchronization with external system
            </summary>
            <typeparam name="TId">Type of the Id</typeparam>
        </member>
        <member name="T:Shesha.Domain.FullPowerChildEntity">
            <summary>
            Base class to use for entities that need support for setting Owner entity as well as most commonly used entity-level framework features:
             * guid as identifier
             * fully auditable
             * multi-tenancy support
            Note: discriminator is not included as it's not used in most cases
            </summary>
        </member>
        <member name="P:Shesha.Domain.FullPowerChildEntity.OwnerId">
            <summary>
            Owning entity ID. ID is intentionally bigger because in some cases an owner ID is set to a data table ID string
            </summary>
        </member>
        <member name="P:Shesha.Domain.FullPowerChildEntity.OwnerType">
            <summary>
            Owning entity type alias
            </summary>
        </member>
        <member name="M:Shesha.Domain.FullPowerChildEntity.SetOwner``1(Abp.Domain.Entities.IEntity{``0})">
            <summary>
            Sets owner with an entity object
            </summary>
        </member>
        <member name="M:Shesha.Domain.FullPowerChildEntity.SetOwner(System.String,System.String)">
            <summary>
            Set owner with type alias and ID
            </summary>
        </member>
        <member name="T:Shesha.Domain.FullPowerEntity">
            <summary>
            Base class to use for entities that need support for most commonly used entity-level framework features:
             * guid as identifier
             * fully auditable
             * multi-tenancy support
            Note: discriminator is not included as it's not used in most cases
            </summary>
        </member>
        <member name="P:Shesha.Domain.FullPowerEntity.TenantId">
            <summary>
            Tenant ID or null for no tenant
            </summary>
        </member>
        <member name="T:Shesha.Domain.FullPowerManyToManyLinkEntity">
            <summary>
            Base class to use for entities that represent a many-to-many link between entities and need support for most commonly used entity-level framework features:
             * guid as identifier
             * fully auditable
             * multi-tenancy support
            Note: discriminator is not included as it's not used in most cases
            </summary>
        </member>
        <member name="P:Shesha.Domain.FullPowerManyToManyLinkEntity.EntityId">
            <summary>
            Entity ID. ID is intentionally bigger because in some cases an owner ID is set to a data table ID string
            </summary>
        </member>
        <member name="P:Shesha.Domain.FullPowerManyToManyLinkEntity.EntityType">
            <summary>
            Entity type alias
            </summary>
        </member>
        <member name="M:Shesha.Domain.FullPowerManyToManyLinkEntity.SetEntity``1(Abp.Domain.Entities.IEntity{``0})">
            <summary>
            Sets Entity from an entity object
            </summary>
        </member>
        <member name="M:Shesha.Domain.FullPowerManyToManyLinkEntity.SetEntity(System.String,System.String)">
            <summary>
            Set Entity from type alias and ID
            </summary>
        </member>
        <member name="T:Shesha.Domain.IHasEntityLink">
            <summary>
            Interface to be implemented by Entities that have a link to other entity.
            For allowing multiple links, please add this interface to a many-to-many link table such as EntityVisibility
            </summary>
        </member>
        <member name="P:Shesha.Domain.IHasEntityLink.EntityId">
            <summary>
            ID of Entity (entity ID or data table ID)
            </summary>
        </member>
        <member name="P:Shesha.Domain.IHasEntityLink.EntityType">
            <summary>
            Entity type alias
            </summary>
        </member>
        <member name="M:Shesha.Domain.IHasEntityLink.SetEntity``1(Abp.Domain.Entities.IEntity{``0})">
            <summary>
            Sets the owners of the entity.
            </summary>
            <param name="entity">The entity which can be used as a Entity for the entity implementing this interface.</param>
        </member>
        <member name="M:Shesha.Domain.IHasEntityLink.SetEntity(System.String,System.String)">
            <summary>
            Sets the Entity of the entity.
            </summary>
            <param name="entityId">Id of the entity which can be used as a Entity for the entity implementing this interface.</param>
            <param name="entityType">The 'TypeShortAlias' of the entity which can be used as a Entity for the entity implementing this interface.</param>
        </member>
        <member name="T:Shesha.Domain.IHasOwningEntityLink">
            <summary>
            Interface to be implemented by Entities which typically
            are child entities of an aggregate and may have different types of 
            'owners/parent'.
            For supporting more than one owner per entity, this interface can be implemented on a many-to-many link table, please see EntityVisibility.cs for an example
            </summary>
        </member>
        <member name="P:Shesha.Domain.IHasOwningEntityLink.OwnerId">
            <summary>
            Owning entity ID
            </summary>
        </member>
        <member name="P:Shesha.Domain.IHasOwningEntityLink.OwnerType">
            <summary>
            Owning entity type alias
            </summary>
        </member>
        <member name="M:Shesha.Domain.IHasOwningEntityLink.SetOwner``1(Abp.Domain.Entities.IEntity{``0})">
            <summary>
            Sets the owners of the entity.
            </summary>
            <param name="owner">The entity which owns the entity implementing this interface.</param>
        </member>
        <member name="M:Shesha.Domain.IHasOwningEntityLink.SetOwner(System.String,System.String)">
            <summary>
            Sets the owners of the entity.
            </summary>
            <param name="ownerId">Id of the entity which owns this entity implementing the interface.</param>
            <param name="ownerType">The 'TypeShortAlias' of the entity which owns this entity implementing the interface.</param>
        </member>
        <member name="T:Shesha.Domain.IHostRoleAndUserBuilder">
            <summary>
            Host role and user builder
            </summary>
        </member>
        <member name="T:Shesha.Domain.ImportResult">
            <summary>
            Import session
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.StartedOn">
            <summary>
            Import start date time
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.FinishedOn">
            <summary>
            Import finish date time
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.IsSuccess">
            <summary>
            If true, indicates that the import successfully completed
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.RowsAffected">
            <summary>
            Number of affected rows
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.RowsSkipped">
            <summary>
            Number of skipped rows
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.RowsInserted">
            <summary>
            Number of interted rows 
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.RowsUpdated">
            <summary>
            Number of updated rows 
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.RowsInactivated">
            <summary>
            Number of deleted/inactivated rows 
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.RowsSkippedNotChanged">
            <summary>
            Number of rows skipped because they are up to date
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.AvgSpeed">
            <summary>
            Average speed (rows per second)
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.LogFile">
            <summary>
            Log file of the import
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.ImportedFile">
            <summary>
            Imported file
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.ImportedFileMD5">
            <summary>
            MD5 hash of the imported file
            </summary>
        </member>
        <member name="P:Shesha.Domain.ImportResult.SourceType">
            <summary>
            Type of the data source
            </summary>
        </member>
        <member name="M:Shesha.Domain.MappingHelper.SortEntityTypesByInheritance(System.Collections.Generic.List{System.Type})">
            <summary>
            Sorts entity types by inheritance (base classes first).
            NH doesn't sort entities itself and throws an exception when you try to map more than 2 levels hierarchy (using TPH)
            </summary>
        </member>
        <member name="M:Shesha.Domain.MappingHelper.GetTableName(System.Type)">
            <summary>
            Returns table name for the specified entity type
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Domain.MappingHelper.GetColumnName(System.Reflection.MemberInfo)">
            <summary>
            Returns column name for the specified property
            </summary>
        </member>
        <member name="M:Shesha.Domain.MappingHelper.GetColumnPrefix(System.Type)">
            <summary>
            Returns prefix for the table columns of the specified type of entity
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Domain.MappingHelper.GetTablePrefix(System.Type)">
            <summary>
            Returns prefix for the table of the specified type of entity
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Domain.MappingHelper.GetRootEntity(System.Type)">
            <summary>
            Returns root entity type for the specified entity type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Domain.MappingHelper.IsRootEntity(System.Type)">
            <summary>
            Returns tru if the specified type is a root entity type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Domain.MappingHelper.IsEntity(System.Type)">
            <summary>
            Returns true if the specified type is an entity type
            </summary>
        </member>
        <member name="M:Shesha.Domain.MappingHelper.GetForeignKeyColumn(System.Reflection.PropertyInfo)">
            <summary>
            Returns name of the foreign key column for the specified Entity reference
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Domain.MappingHelper.GetDiscriminatorValue(System.Type)">
            <summary>
            Returns discriminator value for the specified entity type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Domain.MappingHelper.GetDiscriminatorColumn(System.Type)">
            <summary>
            Returns name of the discriminator column
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Domain.MappingHelper.GetFilterUnknownDiscriminatorsFlag(System.Type)">
            <summary>
            Returns true if NH should filter out unknown discriminators
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Domain.MappingHelper.IsPersistentProperty(System.Reflection.MemberInfo)">
            <summary>
            Returns true if the property is persisted to the DB. Note: this method performs only base check, it may be overrided on the ORM mapping level
            </summary>
        </member>
        <member name="T:Shesha.Domain.MobileDevice">
            <summary>
            Registered mobile device. Is used to restrict access and identify 
            </summary>
        </member>
        <member name="P:Shesha.Domain.MobileDevice.Name">
            <summary>
            Device name
            </summary>
        </member>
        <member name="P:Shesha.Domain.MobileDevice.ReadRouteName">
            <summary>
            Device name
            </summary>
        </member>
        <member name="P:Shesha.Domain.MobileDevice.IMEI">
            <summary>
            Device IMEI number
            </summary>
        </member>
        <member name="P:Shesha.Domain.MobileDevice.IsLocked">
            <summary>
            Indicates that the device is locked
            </summary>
        </member>
        <member name="P:Shesha.Domain.MobileDevice.CreatorUser">
            <summary>
            A user who created the device
            </summary>
        </member>
        <member name="P:Shesha.Domain.OtpAuditItem.SendTo">
            <summary>
            Mobile number/email address (depending on the `send type`) to which the OTP should be sent
            </summary>
        </member>
        <member name="P:Shesha.Domain.OtpAuditItem.SendType">
            <summary>
            Type of sender (Sms = 1, Email = 2)
            </summary>
        </member>
        <member name="P:Shesha.Domain.OtpAuditItem.ExpiresOn">
            <summary>
            Expiration date
            </summary>
        </member>
        <member name="P:Shesha.Domain.OtpAuditItem.SentOn">
            <summary>
            Sent On
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionDefinition.Parent">
            <summary>
            Parent of this permission if one exists.
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionDefinition.Name">
            <summary>
            Unique name of the permission. This is the key name to grant permissions.
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionDefinition.DisplayName">
            <summary>
            Display name of the permission. This can be used to show permission to the user.
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionDefinition.Description">
            <summary>
            A brief description for this permission.
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionedObject.Object">
            <summary>
            Text identifier of the object (for example, the full name of the class)
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionedObject.Category">
            <summary>
            Category for grouping objects
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionedObject.Module">
            <summary>
            Shesha Module of the permissioned object
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionedObject.Type">
            <summary>
            Type of the permissioned object
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionedObject.Name">
            <summary>
            Name for display in the configurator
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionedObject.Description">
            <summary>
            Description for display in the configurator
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionedObject.Permissions">
            <summary>
            List of permissions required to access this securable (comma-separated permission identifiers)
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionedObject.Inherited">
            <summary>
            Object inherits permissions from parent object
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionedObject.Access">
            <summary>
            Access type
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionedObject.Parent">
            <summary>
            Text identifier of the parent object
            </summary>
        </member>
        <member name="P:Shesha.Domain.PermissionedObject.Dependency">
            <summary>
            Dependence on another permissioned object (for example, CRUD API on an entity)
            </summary>
        </member>
        <member name="T:Shesha.Domain.QueryBuilder.JoinClause">
            <summary>
            Join class
            </summary>
        </member>
        <member name="T:Shesha.Domain.QueryBuilder.JoinType">
            <summary>
            Join type
            </summary>
        </member>
        <member name="T:Shesha.Domain.QueryBuilder.QueryBuildingContext">
            <summary>
            Query building context
            </summary>
        </member>
        <member name="P:Shesha.Domain.ReferenceList.HardLinkToApplication">
            <summary>
            If true indicates that the application logic references
            the values or names of the items directly and should therefore
            not be changed once set.
            </summary>
        </member>
        <member name="T:Shesha.Domain.ReferenceListIdentifier">
            <summary>
            Identifier of the <see cref="T:Shesha.Domain.ReferenceList"/> (Namespace and Name)
            </summary>
        </member>
        <member name="T:Shesha.Domain.SeedHelper">
            <summary>
            DB seed helper
            </summary>
        </member>
        <member name="F:Shesha.Domain.ShaUserLoginAttempt.MaxTenancyNameLength">
            <summary>
            Max length of the <see cref="P:Shesha.Domain.ShaUserLoginAttempt.TenancyName"/> property.
            </summary>
        </member>
        <member name="F:Shesha.Domain.ShaUserLoginAttempt.MaxUserNameOrEmailAddressLength">
            <summary>
            Max length of the <see cref="P:Shesha.Domain.ShaUserLoginAttempt.TenancyName"/> property.
            </summary>
        </member>
        <member name="F:Shesha.Domain.ShaUserLoginAttempt.MaxClientIpAddressLength">
            <summary>
            Maximum length of <see cref="P:Shesha.Domain.ShaUserLoginAttempt.ClientIpAddress"/> property.
            </summary>
        </member>
        <member name="F:Shesha.Domain.ShaUserLoginAttempt.MaxClientNameLength">
            <summary>
            Maximum length of <see cref="P:Shesha.Domain.ShaUserLoginAttempt.ClientName"/> property.
            </summary>
        </member>
        <member name="F:Shesha.Domain.ShaUserLoginAttempt.MaxBrowserInfoLength">
            <summary>
            Maximum length of <see cref="P:Shesha.Domain.ShaUserLoginAttempt.BrowserInfo"/> property.
            </summary>
        </member>
        <member name="P:Shesha.Domain.ShaUserLoginAttempt.TenantId">
            <summary>
            Tenant's Id, if <see cref="P:Shesha.Domain.ShaUserLoginAttempt.TenancyName"/> was a valid tenant name.
            </summary>
        </member>
        <member name="P:Shesha.Domain.ShaUserLoginAttempt.TenancyName">
            <summary>
            Tenancy name.
            </summary>
        </member>
        <member name="P:Shesha.Domain.ShaUserLoginAttempt.UserId">
            <summary>
            User's Id, if <see cref="P:Shesha.Domain.ShaUserLoginAttempt.UserNameOrEmailAddress"/> was a valid username or email address.
            </summary>
        </member>
        <member name="P:Shesha.Domain.ShaUserLoginAttempt.UserNameOrEmailAddress">
            <summary>
            User name or email address
            </summary>
        </member>
        <member name="P:Shesha.Domain.ShaUserLoginAttempt.ClientIpAddress">
            <summary>
            IP address of the client.
            </summary>
        </member>
        <member name="P:Shesha.Domain.ShaUserLoginAttempt.ClientName">
            <summary>
            Name (generally computer name) of the client.
            </summary>
        </member>
        <member name="P:Shesha.Domain.ShaUserLoginAttempt.BrowserInfo">
            <summary>
            Browser information if this method is called in a web request.
            </summary>
        </member>
        <member name="P:Shesha.Domain.ShaUserLoginAttempt.Result">
            <summary>
            Login attempt result.
            </summary>
        </member>
        <member name="M:Shesha.Domain.ShaUserLoginAttempt.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abp.Authorization.Users.UserLoginAttempt"/> class.
            </summary>
        </member>
        <member name="P:Shesha.Domain.SheshaDatabaseConsts.EntityIdColumn">
            <summary>
            Entity link columns (for many-to-many link tables). ID
            </summary>
        </member>
        <member name="P:Shesha.Domain.SheshaDatabaseConsts.EntityTypeColumn">
            <summary>
            Entity link columns (for many-to-many link tables). Type alias
            </summary>
        </member>
        <member name="T:Shesha.Domain.StoredFile">
            <summary>
            Stored file
            </summary>
        </member>
        <member name="M:Shesha.Domain.StoredFile.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Shesha.Domain.StoredFile.#ctor(Shesha.Configuration.Runtime.IEntityConfigurationStore)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Shesha.Domain.StoredFile.ParentFile">
            <summary>
            Parent file. It can be set for generated files (points to template) or otherwise connected files.
            </summary>
        </member>
        <member name="P:Shesha.Domain.StoredFile.Folder">
            <summary>
            The setter is private as it should be set once on creation and not changed.
            </summary>
        </member>
        <member name="P:Shesha.Domain.StoredFile.IsVersionControlled">
            <summary>
            If true, the file is version controlled and the full version
            history will be maintained. If false only the current version of the
            file will be kept, any updates will overwrite the previous version.
            </summary>
        </member>
        <member name="M:Shesha.Domain.StoredFile.NewFor``1(Abp.Domain.Entities.IEntity{``0},Shesha.Configuration.Runtime.IEntityConfigurationStore)">
            <summary>
            Creates new file for the specified owner
            </summary>
            <typeparam name="TId"></typeparam>
            <param name="owner"></param>
            <param name="entityConfigurationStore">Entity configuration store</param>
            <returns></returns>
        </member>
        <member name="P:Shesha.Domain.StoredFile.OwnerId">
            <summary>
            The Id of the enity this audit entry relates to.
            </summary>
        </member>
        <member name="P:Shesha.Domain.StoredFile.OwnerType">
            <summary>
            The Type of entity this audit entry relates to.
            </summary>
        </member>
        <member name="M:Shesha.Domain.StoredFile.SetOwner``1(Abp.Domain.Entities.IEntity{``0})">
            <summary>
            Set owner of the file
            </summary>
            <typeparam name="TId">Id type of the owner</typeparam>
            <param name="entity">Owner entity</param>
        </member>
        <member name="M:Shesha.Domain.StoredFile.SetOwner(System.String,System.String)">
            <summary>
            Set owner of the file
            </summary>
        </member>
        <member name="P:Shesha.Domain.StoredFile.TenantId">
            <summary>
            Tenant Id
            </summary>
        </member>
        <member name="T:Shesha.Domain.StoredFileVersion">
            <summary>
            Version of the <see cref="T:Shesha.Domain.StoredFile"/>
            </summary>
        </member>
        <member name="P:Shesha.Domain.StoredFileVersion.File">
            <summary>
            Stored file
            </summary>
        </member>
        <member name="P:Shesha.Domain.StoredFileVersion.VersionNo">
            <summary>
            Version number
            </summary>
        </member>
        <member name="P:Shesha.Domain.StoredFileVersion.FileSize">
            <summary>
            File size
            </summary>
        </member>
        <member name="P:Shesha.Domain.StoredFileVersion.FileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:Shesha.Domain.StoredFileVersion.FileType">
            <summary>
            File type (extension)
            </summary>
        </member>
        <member name="P:Shesha.Domain.StoredFileVersion.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Shesha.Domain.StoredFileVersion.IsSigned">
            <summary>
            Indicated is version signed or not
            </summary>
        </member>
        <member name="P:Shesha.Domain.StoredFileVersion.TenantId">
            <summary>
            Tenant Id
            </summary>
        </member>
        <member name="P:Shesha.Domain.StoredFileVersion.IsLast">
            <summary>
            Is true for last version of the file
            Note: updated by triggers in sql server side
            </summary>
        </member>
        <member name="T:Shesha.Domain.VersionedField">
            <summary>
            Versioned field definition
            </summary>
        </member>
        <member name="P:Shesha.Domain.VersionedField.Name">
            <summary>
            Field name
            </summary>
        </member>
        <member name="P:Shesha.Domain.VersionedField.TrackVersions">
            <summary>
            Defines whether full versions history is tracked and stored or not
            </summary>
        </member>
        <member name="T:Shesha.Domain.VersionedFieldVersion">
            <summary>
            Version definition of a versioned field
            </summary>
        </member>
        <member name="P:Shesha.Domain.VersionedFieldVersion.Field">
            <summary>
            Field link
            </summary>
        </member>
        <member name="P:Shesha.Domain.VersionedFieldVersion.Content">
            <summary>
            Value content
            </summary>
        </member>
        <member name="P:Shesha.Domain.VersionedFieldVersion.IsLast">
            <summary>
            Is true for last version
            Note: updated by triggers in sql server side
            </summary>
        </member>
        <member name="P:Shesha.Dto.Interfaces.IConfigurationItemDto.ModuleId">
            <summary>
            Module Id
            </summary>
        </member>
        <member name="P:Shesha.Dto.Interfaces.IConfigurationItemDto.Module">
            <summary>
            Module name
            </summary>
        </member>
        <member name="P:Shesha.Dto.Interfaces.IConfigurationItemDto.Name">
            <summary>
            Item name
            </summary>
        </member>
        <member name="P:Shesha.Dto.Interfaces.IConfigurationItemDto.Label">
            <summary>
            Label of the con
            </summary>
        </member>
        <member name="P:Shesha.Dto.Interfaces.IConfigurationItemDto.Description">
            <summary>
            Item description
            </summary>
        </member>
        <member name="P:Shesha.Dto.Interfaces.IConfigurationItemDto.VersionNo">
            <summary>
            Version number
            </summary>
        </member>
        <member name="P:Shesha.Dto.Interfaces.IConfigurationItemDto.VersionStatus">
            <summary>
            Version status (Draft/In Progress/Live etc.)
            </summary>
        </member>
        <member name="P:Shesha.Dto.Interfaces.IConfigurationItemDto.Suppress">
            <summary>
            If true, it means that the item will not be visible to Config or End-users/Admins.
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Cache.DynamicDtoProxyCacheItem">
            <summary>
            Dynamic DTO cache item
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Cache.EntityConfigCacheItem">
            <summary>
            EntityConfig cache item
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Cache.IEntityConfigCache">
            <summary>
            Entity config cache
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.Cache.IEntityConfigCache.GetEntityPropertiesAsync(System.Type)">
            <summary>
            Get entity properties
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.DynamicEntities.CascadeEntityCreatorBase`2.FindEntity(Shesha.DynamicEntities.CascadeRuleEntityFinderInfo{`0,`1})">
            <summary>
            Override this function to find Entity
            </summary>
            <param name="info">Input data</param>
            <returns>Found Entity. Null if not found. Throw exception <see cref="T:Shesha.DynamicEntities.CascadeUpdateRuleException"/> if found any constraints</returns>
            <exception cref="T:Shesha.DynamicEntities.CascadeUpdateRuleException">Throw exception of this type if found any constraints</exception>
        </member>
        <member name="M:Shesha.DynamicEntities.CascadeEntityCreatorBase`2.PrepareEntity(Shesha.DynamicEntities.CascadeRuleEntityFinderInfo{`0,`1})">
            <summary>
            Override this function to prepare new Entity
            </summary>
            <param name="info">Input data</param>
            <returns>Found Entity. Null if not found. Throw exception <see cref="T:Shesha.DynamicEntities.CascadeUpdateRuleException"/> if found any constraints</returns>
            <exception cref="T:Shesha.DynamicEntities.CascadeUpdateRuleException">Throw exception of this type if found any constraints</exception>
        </member>
        <member name="M:Shesha.DynamicEntities.CascadeEntityCreatorBase`2.VerifyEntity(Shesha.DynamicEntities.CascadeRuleEntityFinderInfo{`0,`1},System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Override this function to validate input
            </summary>
            <param name="info">Input data</param>
            <param name="errors">Errors</param>
            <returns>Found Entity. Null if not found. Throw exception <see cref="T:Shesha.DynamicEntities.CascadeUpdateRuleException"/> if found any constraints</returns>
            <exception cref="T:Shesha.DynamicEntities.CascadeUpdateRuleException">Throw exception of this type if found any constraints</exception>
        </member>
        <member name="T:Shesha.DynamicEntities.CascadeUpdateRuleException">
            <summary>
            Throw exception of this type if found any constraints
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.CascadeUpdateRulesAttribute">
            <summary>
            Specifies rules of cascade update/cretate child/nested entities for bindibg Dynamic entities
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.CascadeUpdateRulesAttribute.CanUpdate">
            <summary>
            Allows to update child/nested entity
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.CascadeUpdateRulesAttribute.CanCreate">
            <summary>
            Allows to create child/nested entity
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.CascadeUpdateRulesAttribute.DeleteUnreferenced">
            <summary>
            Delete child/nested entity if reference was removed and the child/nested entity doesn't have nother references
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Dtos.EntityConfigDto">
            <summary>
            Entity config DTO
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityConfigDto.Source">
            <summary>
            Source of the entity (code/user)
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Dtos.EntityPropertyDto">
            <summary>
            Entity property DTO
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.EntityConfigName">
            <summary>
            Entity Config Name
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.Name">
            <summary>
            Property Name
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.Label">
            <summary>
            Label (display name)
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.DataType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.DataFormat">
            <summary>
            Data format
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.EntityType">
            <summary>
            Entity type. Aplicable for entity references
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.ReferenceListName">
            <summary>
            Reference list name
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.ReferenceListNamespace">
            <summary>
            Reference list namespace
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.Source">
            <summary>
            Source type (ApplicationCode = 1, UserDefined = 2)
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.Properties">
            <summary>
            Child properties, applicable for complex data types (e.g. object, array)
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.ItemsType">
            <summary>
            Items type (applicable for arrays)
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.Suppress">
            <summary>
            If true, the property is not returned from Get end-points and is ignored if submitted on Create/Update end-points
            The property should also not be listed on the form configurator property list
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.Required">
            <summary>
            Indicates if a property value is required in order to save
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.ReadOnly">
            <summary>
            If true, the property cannot be edited via the dynamically generated create/update end-points:
            - property should not be listed on create/update end-points
            - should be set to 'True' and not editable for read-only properties of domain classes
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.Audited">
            <summary>
            Equivalent to Audited attribute on the property
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.Min">
            <summary>
            Validation min
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.Max">
            <summary>
            Validation max
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.MinLength">
            <summary>
            Validation min length
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.MaxLength">
            <summary>
            Validation max length
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.RegExp">
            <summary>
            Validation RegularExpression 
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.EntityPropertyDto.ValidationMessage">
            <summary>
            Validation message
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Dtos.IDynamicDtoProxy">
            <summary>
            Dynamic DTO proxy
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Dtos.IDynamicNestedObject">
            <summary>
            Dynamic nested object
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Dtos.ModelConfigurationDto">
            <summary>
            Model configuration DTO
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelConfigurationDto.Source">
            <summary>
            Source of the entity (code/user)
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Dtos.ModelPropertyDto">
            <summary>
            Model property DTO
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.Name">
            <summary>
            Property Name
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.Label">
            <summary>
            Label (display name)
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.DataType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.DataFormat">
            <summary>
            Data format
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.EntityType">
            <summary>
            Entity type. Aplicable for entity references
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.ReferenceListName">
            <summary>
            Reference list name
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.ReferenceListNamespace">
            <summary>
            Reference list namespace
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.Source">
            <summary>
            Source type (ApplicationCode = 1, UserDefined = 2)
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.SortOrder">
            <summary>
            Default sort order
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.Properties">
            <summary>
            Child properties, applicable for complex data types (e.g. object, array)
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.IsFrameworkRelated">
            <summary>
            If true, indicates that current property is a framework-related (e.g. <see cref="!:ISoftDelete.IsDeleted"/>, <see cref="!:IHasModificationTime.LastModificationTime"/>)
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.Suppress">
            <summary>
            If true, the property is not returned from Get end-points and is ignored if submitted on Create/Update end-points
            The property should also not be listed on the form configurator property list
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.Required">
            <summary>
            Indicates if a property value is required in order to save
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.ReadOnly">
            <summary>
            If true, the property cannot be edited via the dynamically generated create/update end-points:
            - property should not be listed on create/update end-points
            - should be set to 'True' and not editable for read-only properties of domain classes
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.Audited">
            <summary>
            Equivalent to Audited attribute on the property
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.Min">
            <summary>
            Validation min
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.Max">
            <summary>
            Validation max
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.MinLength">
            <summary>
            Validation min length
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.MaxLength">
            <summary>
            Validation max length
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.RegExp">
            <summary>
            Validation RegularExpression 
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.Dtos.ModelPropertyDto.ValidationMessage">
            <summary>
            Validation message
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.DynamicDtoExtensions.IsDynamicDto(System.Type)">
            <summary>
            Returns true if the specified <paramref name="type"/> implements <see cref="T:Shesha.DynamicEntities.Dtos.IDynamicDto`2"/>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.DynamicEntities.DynamicDtoExtensions.GetDynamicDtoEntityType(System.Type)">
            <summary>
            Returns an entity type of the specified dynamic DTO (<see cref="T:Shesha.DynamicEntities.Dtos.IDynamicDto`2"/>)
            </summary>
            <param name="type">Type of the dynamic DTO, <see cref="T:Shesha.DynamicEntities.Dtos.IDynamicDto`2"/></param>
            <returns></returns>
        </member>
        <member name="P:Shesha.DynamicEntities.DynamicDtoTypeBuilder.FullProxyCache">
            <summary>
            Cache of proxy classes
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.DynamicDtoTypeBuilder.Logger">
            <summary>
            Reference to the logger to write logs.
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.DynamicDtoTypeBuilder.BuildDtoProxyTypeAsync(Shesha.DynamicEntities.DynamicDtoTypeBuildingContext)">
            inheritedDoc
        </member>
        <member name="M:Shesha.DynamicEntities.DynamicDtoTypeBuilder.GetDtoPropertyTypeAsync(Shesha.DynamicEntities.Dtos.EntityPropertyDto,Shesha.DynamicEntities.DynamicDtoTypeBuildingContext)">
            <summary>
            Returns .Net type that is used to store data for the specified DTO property (according to the property settings)
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.DynamicDtoTypeBuildingContext">
            <summary>
            Context of the dynamic DTO building process, is used by the <see cref="T:Shesha.DynamicEntities.IDynamicDtoTypeBuilder"/>
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.DynamicDtoTypeBuildingContext.ModelType">
            <summary>
            Model type. Typically it's a type of entity
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.DynamicDtoTypeBuildingContext.PropertyFilter">
            <summary>
            Property filter. Return true if the field should be included into the result type
            </summary>
        </member>
        <member name="F:Shesha.DynamicEntities.DynamicDtoTypeBuildingContext.Classes">
            <summary>
            Classes dictionary, is used for analyze of the building process and for constructions of the automapper configurations
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.DynamicDtoTypeBuildingContext.ClassCreated(System.Type)">
            <summary>
            Register .net type that created during the building process. This method updates classes dictionary <see cref="F:Shesha.DynamicEntities.DynamicDtoTypeBuildingContext.Classes"/>
            </summary>
            <param name="class"></param>
        </member>
        <member name="P:Shesha.DynamicEntities.DynamicDtoTypeBuildingContext.AddFormFieldsProperty">
            <summary>
            If true, indicates that a service property '_formFields' should be added to the result type
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.DynamicDtoTypeBuildingContext.UseDtoForEntityReferences">
            <summary>
            If true, indicates that entity references should be mapped as DTOs (id and display name) instead of raw values (id)
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.DynamicDtoTypeBuildingContext.OpenNamePrefix(System.String)">
            <summary>
            Open name prefix context and returns disposable action that automaticaly closes it. Is used in the recursive operations
            </summary>
            <param name="prefix">New prefix value</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.DynamicEntities.DynamicDtoTypeBuildingContext.CloseNamePrefix(System.String)">
            <summary>
            Close name prefix and with nesting
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.DynamicDtoTypeBuildingContext.CurrentPrefix">
            <summary>
            Current prefix in dot notation (e.g. 'prefix1.prefix2')
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.DynamicEntity">
            <summary>
            Dynamic entity
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.DynamicEntity.Name">
            <summary>
            Entity class name
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.DynamicEntity.Properties">
            <summary>
            Properties
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.DynamicMappingSettings">
            <summary>
            Dynamic mapping settings
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.DynamicMappingSettings.UseDtoForEntityReferences">
            <summary>
            If true, indicates that entity references should be mapped as DTOs (id and display name) instead of raw values (id)
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.DynamicProperty">
            <summary>
            Dynamic entity property
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.DynamicProperty.PropertyName">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.DynamicProperty.PropertyType">
            <summary>
            Property type
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.DynamicPropertyList">
            <summary>
            List of dynamic properties
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.DynamicPropertyList.Add(System.String,System.Type)">
            <summary>
            Add new property to the list
            </summary>
            <param name="propertyName"></param>
            <param name="propertyType"></param>
        </member>
        <member name="T:Shesha.DynamicEntities.DynamicPropertyManager">
            inheritedDoc
        </member>
        <member name="T:Shesha.DynamicEntities.IDynamicDtoTypeBuilder">
            <summary>
            Dynamic DTO builder
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.IDynamicDtoTypeBuilder.BuildDtoProxyTypeAsync(Shesha.DynamicEntities.DynamicDtoTypeBuildingContext)">
            <summary>
            Build proxy type for the DTO
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.IDynamicDtoTypeBuilder.BuildDtoFullProxyTypeAsync(System.Type,Shesha.DynamicEntities.DynamicDtoTypeBuildingContext)">
            <summary>
            Build full proxy type for the specified DTO. Full proxy contains all configurable fields and service fields (e.g. <see cref="P:Shesha.DynamicEntities.IHasFormFieldsList._formFields"/> property)
            </summary>
            <param name="baseType">DTO type</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.DynamicEntities.IDynamicDtoTypeBuilder.GetEntityPropertiesAsync(System.Type)">
            <summary>
            Get properties of the specified dynamic entity
            </summary>
            <param name="entityType">Type of entity</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.DynamicEntities.IDynamicDtoTypeBuilder.GetDtoPropertyTypeAsync(Shesha.DynamicEntities.Dtos.EntityPropertyDto,Shesha.DynamicEntities.DynamicDtoTypeBuildingContext)">
            <summary>
            Returns .Net type that is used to store data for the specified DTO property (according to the property settings)
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.IDynamicMappingSettings">
            <summary>
            Dynamic mapping settings
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.IDynamicMappingSettings.UseDtoForEntityReferences">
            <summary>
            If true, indicates that entity references should be mapped as DTOs (id and display name) instead of raw values (id)
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.IDynamicMappingSettings.UseDynamicDtoProxy">
            <summary>
            If true, indicates that need to create DynamicDtoProxy
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.IDynamicPropertyManager">
            <summary>
            Dynamic Property Manager
            Provides features to get and set values to dynamic properties of entities and Dtos
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.IDynamicPropertyManager.GetValueAsync``1(Abp.Domain.Entities.IEntity{``0},Shesha.DynamicEntities.Dtos.EntityPropertyDto)">
            <summary>
            Get dynamic property value
            </summary>
            <typeparam name="TId">Type of primary key</typeparam>
            <param name="entity">Entity</param>
            <param name="property">Property to get value</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.DynamicEntities.IDynamicPropertyManager.SetValueAsync``1(Abp.Domain.Entities.IEntity{``0},Shesha.DynamicEntities.Dtos.EntityPropertyDto,System.String,System.Boolean)">
            <summary>
            Get dynamic property value
            </summary>
            <typeparam name="TId">Type of primary key</typeparam>
            <param name="entity">Entity</param>
            <param name="property">Property to set value</param>
            <param name="value">Value</param>
            <param name="createNewVersion">True if need to create a new version of value</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.DynamicEntities.IDynamicPropertyManager.MapDtoToEntityAsync``3(``0,``1)">
            <summary>
            Map values of dynamic properties from Dto to Entity
            </summary>
            <typeparam name="TId">Type of primary key</typeparam>
            <typeparam name="TDynamicDto">Type of Dto</typeparam>
            <typeparam name="TEntity">Type of Entity</typeparam>
            <param name="dynamicDto">Dto</param>
            <param name="entity">Entity</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.DynamicEntities.IDynamicPropertyManager.MapJObjectToEntityAsync``2(Newtonsoft.Json.Linq.JObject,``0)">
            <summary>
            Map values of dynamic properties from JObject to Entity
            </summary>
            <typeparam name="TId">Type of primary key</typeparam>
            <typeparam name="TEntity">Type of Entity</typeparam>
            <param name="jObject">Data</param>
            <param name="entity">Entity</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.DynamicEntities.IDynamicPropertyManager.MapEntityToDtoAsync``3(``1,``0)">
            <summary>
            Map values of dynamic properties from Entity to Dto
            </summary>
            <typeparam name="TId">Type of primary key</typeparam>
            <typeparam name="TDynamicDto">Type of Dto</typeparam>
            <typeparam name="TEntity">Type of Entity</typeparam>
            <param name="entity">Entity</param>
            <param name="dynamicDto">Dto</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.DynamicEntities.IDynamicPropertyManager.GetEntityPropertyAsync``2(``0,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TId"></typeparam>
            <param name="entity"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.DynamicEntities.IDynamicPropertyManager.GetPropertyAsync(System.Object,System.String)">
            <summary>
            Get entity property value
            </summary>
            <param name="entity"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.DynamicEntities.IHasFormFieldsList">
            <summary>
            Declares common interface for DTOs those have form fields list. Is used for dynamic entities
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.IHasFormFieldsList._formFields">
            <summary>
            List of form fields. Is used for partial updates. Contains a list of entity properties that should be updated. Leave empty to update all available entity fields
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.IHasJObjectField">
            <summary>
            Declares common interface for DTOs those have JSON request data as JObject. Is used for dynamic entities
            </summary>
        </member>
        <member name="P:Shesha.DynamicEntities.IHasJObjectField.JObject">
            <summary>
            JSON request data as JObject
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.IHasNamePrefixStack">
            <summary>
            Declares common interface of service that has a prefix stack. Is used for recursive operations
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.IHasNamePrefixStack.OpenNamePrefix(System.String)">
            <summary>
            Open name prefix context and returns disposable action that automaticaly closes it. Is used in the recursive operations
            </summary>
            <param name="prefix">New prefix value</param>
            <returns></returns>
        </member>
        <member name="P:Shesha.DynamicEntities.IHasNamePrefixStack.CurrentPrefix">
            <summary>
            Current prefix in dot notation (e.g. 'prefix1.prefix2')
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.IModelConfigurationProvider">
            <summary>
            Model Configuration Provider. Provides an access to the configurable models and properties
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.IModelConfigurationProvider.GetModelConfigurationAsync(Shesha.Domain.EntityConfig,System.Collections.Generic.List{Shesha.Metadata.Dtos.PropertyMetadataDto})">
            <summary>
            Get model configuration
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.IModelConfigurationProvider.GetModelConfigurationOrNullAsync(System.String,System.String,System.Collections.Generic.List{Shesha.Metadata.Dtos.PropertyMetadataDto})">
            <summary>
            Get model configuration
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.ISerializationManager">
            <summary>
            Dynamic entity serialization manager
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.ISerializationManager.SerializeProperty(Shesha.DynamicEntities.Dtos.EntityPropertyDto,System.Object)">
            <summary>
            Serialize property value
            </summary>
            <param name="propertyDto"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.DynamicEntities.ISerializationManager.DeserializeProperty(System.Type,System.String)">
            <summary>
            Deserialize property value
            </summary>
            <param name="propertyType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.DynamicEntities.Json.DateConverter">
            <summary>
            Date JSON converter. Converts date without
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Mapper.ConverterDefinition">
            <summary>
            Automapper converter definition
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Mapper.EntityMapProfile">
            <summary>
            Entity mapping profile
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Mapper.EntityToEntityWithDisplayNameDtoConverter`2">
            <summary>
            Entity to EntityWithDisplayNameDto converter
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Mapper.EntityToIdConverter`2">
            <summary>
            Id to Entity converter
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Mapper.EntityWithDisplayNameDtoToEntityConverter`2">
            <summary>
            EntityWithDisplayNameDto to Entity converter
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Mapper.EnumToNumericTypeConverter`2">
            <summary>
            Enum to numeric converter
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Mapper.IdToEntityConverter`2">
            <summary>
            Id to Entity converter
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Mapper.IDynamicDtoMappingHelper">
            <summary>
            Automapper configurations cache
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.Mapper.IDynamicDtoMappingHelper.GetEntityToDtoMapperAsync(System.Type,System.Type)">
            <summary>
            Get entity to DTO mapper
            </summary>
        </member>
        <member name="M:Shesha.DynamicEntities.Mapper.IDynamicDtoMappingHelper.GetDtoToEntityMapperAsync(System.Type,System.Type)">
            <summary>
            Get DTO to entity mapper
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Mapper.NumericToEnumTypeConverter`2">
            <summary>
            Numeric to enum converter
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.Mapper.ReferenceListMapProfile">
            <summary>
            Entity mapping profile
            </summary>
        </member>
        <member name="T:Shesha.DynamicEntities.ModelConfigurationProvider">
            inheritedDoc
        </member>
        <member name="T:Shesha.DynamicEntities.SerializationManager">
            inheritedDoc
        </member>
        <member name="M:Shesha.DynamicEntities.SerializationManager.DeserializeProperty(System.Type,System.String)">
            inheritedDoc
        </member>
        <member name="M:Shesha.DynamicEntities.SerializationManager.SerializeProperty(Shesha.DynamicEntities.Dtos.EntityPropertyDto,System.Object)">
            inheritedDoc
        </member>
        <member name="T:Shesha.Exceptions.ExceptionEventHandler">
            <summary>
            Exception event handler
            </summary>
        </member>
        <member name="T:Shesha.Exceptions.ExceptionExtensions">
            <summary>
            Exception extensions
            </summary>
        </member>
        <member name="M:Shesha.Exceptions.ExceptionExtensions.FullMessage(System.Exception)">
            <summary>
            Returns error message text including messages from the inner exceptions
            </summary>
        </member>
        <member name="M:Shesha.Exceptions.ExceptionExtensions.LogError(System.Exception)">
            <summary>
            Logs error using current logger configuration
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Shesha.Exceptions.ShaExceptionToErrorInfoConverter">
            <summary>
            Shesha exception to ErrorInfo converter
            </summary>
        </member>
        <member name="T:Shesha.Extensions.ConversionExtensions">
            <summary>
            Type conversion
            </summary>
        </member>
        <member name="M:Shesha.Extensions.ConversionExtensions.ToInt64(System.String,System.Int64)">
            <summary>
            Convert string to long
            </summary>
        </member>
        <member name="M:Shesha.Extensions.ConversionExtensions.ToInt64OrNull(System.String)">
            <summary>
            Convert string to long
            </summary>
        </member>
        <member name="T:Shesha.Extensions.EntityExtensions">
            <summary>
            Entity extensions
            </summary>
        </member>
        <member name="M:Shesha.Extensions.EntityExtensions.GetDisplayName``1(Abp.Domain.Entities.IEntity{``0})">
            <summary>
            Returns the DisplayName of the entity.
            </summary>
            <returns>Returns the DisplayName of the entity.</returns>
        </member>
        <member name="M:Shesha.Extensions.EntityExtensions.GetId``1(Abp.Domain.Entities.IEntity{``0})">
            <summary>
            
            </summary>
            <typeparam name="TId"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Extensions.EntityExtensions.SetPropertyValue(System.Object,System.String,System.String,System.String)">
            <summary>
            Sets the value of the specified property.
            </summary>
            <param name="entity">Entity whose property is to be set.</param>
            <param name="propertyName">Name of the property to be set.</param>
            <param name="value">Value to set the property to as a string.</param>
            <param name="format"></param>
            <returns>Returns true if the property was set successfully, else returns false e.g. in case of unexpected value.</returns>
        </member>
        <member name="M:Shesha.Extensions.EntityExtensions.GetTypeShortAlias``1(Abp.Domain.Entities.IEntity{``0})">
            <summary>
            Returns TypeShortAlias of the specified entity
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Thrown when entity has no TypeShortAlias</exception>
        </member>
        <member name="M:Shesha.Extensions.EntityExtensions.LoadAs``2(``1)">
            <summary>
            Loads the specified entity from the DB with cast to the specified class (if needed), is useful when the entity is loaded from the DB using the base class (e.g. Employee is loaded from the DB as a Person)
            </summary>
        </member>
        <member name="M:Shesha.Extensions.EntityExtensions.FullyQualifiedEntityId``2(``0)">
            <summary>
            Returns a string that represents a fully qualified entity Identifier.
            The identifier is in the following format: '[The entity's Type Assembly qualitfied name]|[entity Id]'
            </summary>
            <param name="entity">Entity for which a fully qualified identifier is required.</param>
            <returns>Returns a string that represents a fully qualified entity Identifier.</returns>
        </member>
        <member name="M:Shesha.Extensions.EntityExtensions.GetMultiValueReferenceListItemNames(System.Object,System.String,System.String,System.String)">
            <summary>
            Returns a comma separated list of Reference List Item referenced by the property.
            </summary>
            <param name="propertyName">Name of the Reference List Item property.</param>
            <param name="defaultValue">Value to return if reference list item value is null or empty.</param>
            <returns>If property value is null returns the <paramref name="defaultValue"/>, else
            returns a comma separated list of the Rerefence List Items.</returns>
        </member>
        <member name="M:Shesha.Extensions.EntityExtensions.GetMultiValueReferenceListItemNamesAr(System.Object,System.String)">
            <summary>
            Returns a string array of allReference List items referenced by the property.
            </summary>
            <param name="propertyName">Name of the Reference List Item property.</param>
            <param name="defaultValue">Value to return if reference list item value is null or empty.</param>
            <returns>If property value is null or zero-length string, returns a zero length array, else
            returns a list Rerefence List items specified by the property value.</returns>
        </member>
        <member name="M:Shesha.Extensions.EntityExtensions.DecomposeIntoBitFlagComponents(System.Int64)">
            <summary>
            Decomposes an integers into an array of its constituent BitFlag values (i.e. 1, 2, 4, etc...).
            </summary>
        </member>
        <member name="M:Shesha.Extensions.EntityExtensions.DecomposeIntoBitFlagComponents(System.Nullable{System.Int64})">
            <summary>
            Decomposes an integers into an array of its constituent BitFlag values (i.e. 1, 2, 4, etc...).
            </summary>
        </member>
        <member name="T:Shesha.Extensions.IEnumerableExtensions">
            <summary>
            Enumerable extensions
            </summary>
        </member>
        <member name="M:Shesha.Extensions.IEnumerableExtensions.SplitList``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Splits a List into smaller lists of N size
            </summary>
        </member>
        <member name="T:Shesha.Extensions.IQueryableExtensions">
            <summary>
            Queryable extensions (https://stackoverflow.com/a/44071949)
            </summary>
        </member>
        <member name="M:Shesha.Extensions.IQueryableExtensions.CallOrderedQueryable``1(System.Linq.IQueryable{``0},System.String,System.String,System.Collections.Generic.IComparer{System.Object})">
            <summary>
            Builds the Queryable functions using a TSource property name.
            </summary>
        </member>
        <member name="M:Shesha.Extensions.IQueryableExtensions.ApplyFilter``2(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Apply JsonLogic filter to a queryable. Note: it uses default <see cref="T:Shesha.JsonLogic.IJsonLogic2LinqConverter"/> registered in the IoCManager
            </summary>
            <param name="query">Queryable to be filtered</param>
            <param name="filter">String representation of JsonLogic filter</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Extensions.LinqExtensions.MaxOrDefaultAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Threading.CancellationToken)">
            <summary>
            Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1" /> and returns the maximum resulting value or <paramref name="defaultValue"/> if the sequence contains no elements.
            </summary>
            <param name="source">A sequence of values to determine the maximum of.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="defaultValue"></param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the work.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
            <returns>The maximum value in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Shesha.Extensions.LinqExtensions.OrderByDynamic``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Order by property name
            </summary>
            <param name="items">A sequence of values to order</param>
            <param name="propertyName">name of property</param>
            <param name="direction">Direction: "asc"/"desc"</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Extensions.LinqExtensions.LikeDynamic``1(System.Collections.Generic.IEnumerable{``0},System.String[],System.String)">
            <summary>
            Order by property name
            </summary>
            <param name="items">A sequence of values to order</param>
            <param name="propertyName">name of property</param>
            <param name="direction">Direction: "asc"/"desc"</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Extensions.ObjectExtensions.IsEntity(System.Object)">
            <summary>
            Indicates is an entity
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Extensions.ObjectExtensions.IsEntityType(System.Type)">
            <summary>
            Indicates is the specified type a type of entity
            </summary>
        </member>
        <member name="M:Shesha.Extensions.ObjectExtensions.IsReferenceListType(System.Type)">
            <summary>
            Indicates is the specified type a reference list type
            </summary>
        </member>
        <member name="M:Shesha.Extensions.ObjectExtensions.GetEntityIdType(System.Type)">
            <summary>
            Get type of the `Id` property. Applicable for entity types
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.Extensions.RepositoryExtensions">
            <summary>
            <see cref="T:Abp.Domain.Repositories.IRepository"/> extensions
            </summary>
        </member>
        <member name="M:Shesha.Extensions.RepositoryExtensions.GetAllFiltered``2(Abp.Domain.Repositories.IRepository{``0,``1},System.String)">
            <summary>
            Query all entities filtered using <paramref name="filter"/> (filter in JsonLogic format)
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TPrimaryKey"></typeparam>
            <param name="repository">Repository</param>
            <param name="filter">Filter in JsonLogic format</param>
            <returns></returns>
        </member>
        <member name="T:Shesha.Extensions.SheshaMiddlewareExtensions">
            <summary>
            Shesha middleware extensions
            </summary>
        </member>
        <member name="M:Shesha.Extensions.StoredFileExtensions.GetFileUrl(Shesha.Domain.StoredFile)">
            <summary>
            Get url for downloading of the StoredFile
            </summary>
            <param name="storedFile"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Extensions.StoredFileExtensions.GetFileVersionUrl(Shesha.Domain.StoredFileVersion)">
            <summary>
            Get url for downloading of the StoredFileVersion
            </summary>
            <param name="storedFileVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Extensions.StreamExtensions.CopyToStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copy stream to stream
            </summary>
        </member>
        <member name="T:Shesha.JsonLogic.ExpressionExtensions">
            <summary>
            Expression extensions
            </summary>
        </member>
        <member name="M:Shesha.JsonLogic.ExpressionExtensions.AddNullCheck(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Adds a "null check" to the expression (before the original one).
            </summary>
            <param name="expression">Expression to which the null check will be pre-pended.</param>
            <param name="member">Member that will be checked.</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.JsonLogic.ExpressionExtensions.GetMemberExpression(System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets a member expression for an specific property
            </summary>
            <param name="param"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.JsonLogic.IJsonLogic2LinqConverter">
            <summary>
            Json Logic to Linq converter
            </summary>
        </member>
        <member name="M:Shesha.JsonLogic.IJsonLogic2LinqConverter.ParseExpressionOf``1(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Parse JsonLogic expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.JsonLogic.IJsonLogic2LinqConverter.ParsePredicateOf``1(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Parse predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.JsonLogic.JsonExtensions">
            <summary>
            Json extensions
            </summary>
        </member>
        <member name="M:Shesha.JsonLogic.JsonExtensions.IsNullOrEmpty(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns true if <paramref name="token"/> is null or empty
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.JsonLogic.JsonLogic2LinqConverter">
            <summary>
            Json Logic to Linq converter
            </summary>
        </member>
        <member name="M:Shesha.JsonLogic.JsonLogic2LinqConverter.GetOperation(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Get operation props
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.JsonLogic.OperationProps">
            <summary>
            JsonLogic operation
            </summary>
        </member>
        <member name="T:Shesha.Locks.ILockFactory">
            <summary>
            Interface of the lock factory. Is used for local or distributed locks
            </summary>
        </member>
        <member name="M:Shesha.Locks.ILockFactory.DoExclusiveAsync(System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Perform an exclusive action
            </summary>
            <param name="resource">Name of the resource to lock</param>
            <param name="expiryTime">Lock expiration time</param>
            <param name="action">Action to perform</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Locks.ILockFactory.DoExclusive(System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Action)">
            <summary>
            Perform an exclusive action
            </summary>
            <param name="resource">Name of the resource to lock</param>
            <param name="expiryTime">Lock expiration time</param>
            <param name="action">Action to perform</param>
            <returns></returns>
        </member>
        <member name="T:Shesha.Locks.NullLockFactory">
            <summary>
            Implements null object pattern for <see cref="T:Shesha.Locks.ILockFactory"/>.
            </summary>
        </member>
        <member name="M:Shesha.Locks.NullLockFactory.DoExclusiveAsync(System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Func{System.Threading.Tasks.Task})">
            inheritedDoc
        </member>
        <member name="M:Shesha.Locks.NullLockFactory.DoExclusive(System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Action)">
            inheritedDoc
        </member>
        <member name="T:Shesha.Locks.RedisLockFactory">
            <summary>
            Redis lock factory
            </summary>
        </member>
        <member name="M:Shesha.Locks.RedisLockFactory.DoExclusiveAsync(System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Perform an exclusive action
            </summary>
            <param name="resource">Name of the resource to lock</param>
            <param name="expiryTime">Lock expiration time</param>
            <param name="action">Action to perform</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Locks.RedisLockFactory.DoExclusive(System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Action)">
            <summary>
            Perform an exclusive action
            </summary>
            <param name="resource">Name of the resource to lock</param>
            <param name="expiryTime">Lock expiration time</param>
            <param name="action">Action to perform</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Locks.RedisLockFactory.Dispose">
            <summary>
            Dispose lock factory
            </summary>
        </member>
        <member name="T:Shesha.Metadata.BaseModelProvider">
            <summary>
             Base model provider
            </summary>
        </member>
        <member name="P:Shesha.Metadata.BaseModelProvider.ModelsCache">
            <summary>
            Cache of the ReferenceListItems
            </summary>
        </member>
        <member name="M:Shesha.Metadata.BaseModelProvider.GetModelsAsync">
            inheritedDoc
        </member>
        <member name="M:Shesha.Metadata.BaseModelProvider.GetModelTypeAsync(System.String)">
            inheritedDoc
        </member>
        <member name="T:Shesha.Metadata.DataTypeInfo">
            <summary>
            Data type and format info
            </summary>
        </member>
        <member name="P:Shesha.Metadata.DataTypeInfo.DataType">
            <summary>
            Data Type
            </summary>
        </member>
        <member name="P:Shesha.Metadata.DataTypeInfo.DataFormat">
            <summary>
            Data format
            </summary>
        </member>
        <member name="T:Shesha.Metadata.DataTypes">
            <summary>
            Data types
            </summary>
        </member>
        <member name="T:Shesha.Metadata.ArrayFormats">
            <summary>
            Custom array formats
            </summary>
        </member>
        <member name="T:Shesha.Metadata.StringFormats">
            <summary>
            Custom string formats
            </summary>
        </member>
        <member name="T:Shesha.Metadata.NumberFormats">
            <summary>
            Custom number formats
            </summary>
        </member>
        <member name="T:Shesha.Metadata.Dtos.ModelDto">
            <summary>
            Generic model DTO. Is used by the forms designer
            </summary>
        </member>
        <member name="P:Shesha.Metadata.Dtos.PropertyMetadataDto.Audited">
            <summary>
            Equivalent to Audited attribute on the property
            </summary>
        </member>
        <member name="P:Shesha.Metadata.Dtos.PropertyMetadataDto.RegExp">
            <summary>
            Validation RegularExpression 
            </summary>
        </member>
        <member name="P:Shesha.Metadata.Dtos.PropertyMetadataDto.ValidationMessage">
            <summary>
            Validation message
            </summary>
        </member>
        <member name="P:Shesha.Metadata.Dtos.PropertyMetadataDto.IsFrameworkRelated">
            <summary>
            If true, indicates that current property is a framework-related (e.g. <see cref="P:Abp.Domain.Entities.ISoftDelete.IsDeleted"/>, <see cref="P:Abp.Domain.Entities.Auditing.IHasModificationTime.LastModificationTime"/>)
            </summary>
        </member>
        <member name="P:Shesha.Metadata.Dtos.PropertyMetadataDto.Properties">
            <summary>
            Child properties (applicable for complex objects)
            </summary>
        </member>
        <member name="P:Shesha.Metadata.Dtos.PropertyMetadataDto.ItemsType">
            <summary>
            Items type (applicable for arrays)
            </summary>
        </member>
        <member name="T:Shesha.Metadata.IMetadataProvider">
            <summary>
            Metadata provider
            </summary>
        </member>
        <member name="M:Shesha.Metadata.IMetadataProvider.GetPropertyMetadata(System.Reflection.PropertyInfo)">
            <summary>
            Get metadata of specified property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Metadata.IMetadataProvider.GetProperties(System.Type)">
            <summary>
            Get properties metadata of the specified <paramref name="type"/>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Metadata.IMetadataProvider.GetDataType(System.Reflection.PropertyInfo)">
            <summary>
            Get data type of the specified property
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shesha.Metadata.IModelProvider">
            <summary>
            Models provider
            </summary>
        </member>
        <member name="M:Shesha.Metadata.IModelProvider.GetModelsAsync">
            <summary>
            Get available models
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shesha.Metadata.IModelProvider.GetModelTypeAsync(System.String)">
            <summary>
            Get model type by name or alias
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shesha.Metadata.IModelProvider.ClearCache">
            <summary>
            Clear models cache
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shesha.Metadata.IPropertyMetadata">
            <summary>
            Property metadata interface
            </summary>
        </member>
        <member name="P:Shesha.Metadata.IPropertyMetadata.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Shesha.Metadata.IPropertyMetadata.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="P:Shesha.Metadata.IPropertyMetadata.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Shesha.Metadata.IPropertyMetadata.DataType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="T:Shesha.Metadata.MetadataProvider">
            <summary>
            Metadata provider
            </summary>
        </member>
        <member name="M:Shesha.Metadata.MetadataProvider.GetProperties(System.Type)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Metadata.MetadataProvider.GetPropertyMetadata(System.Reflection.PropertyInfo)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Metadata.MetadataProvider.GetDataType(System.Reflection.PropertyInfo)">
            inheritedDoc
        </member>
        <member name="T:Shesha.Metadata.PropertyMetadata">
            <summary>
            Property metadata
            </summary>
        </member>
        <member name="P:Shesha.Metadata.PropertyMetadata.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Shesha.Metadata.PropertyMetadata.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="P:Shesha.Metadata.PropertyMetadata.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Shesha.Metadata.PropertyMetadata.DataType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="T:Shesha.Migrations.IMigrationGenerator">
            <summary>
            Generates database migrations
            </summary>
        </member>
        <member name="M:Shesha.Migrations.IMigrationGenerator.GroupByPrefixes(System.Collections.Generic.List{System.Type})">
            <summary>
            Groups list of types by prefix. Note: temporary method, to be removed
            </summary>
            <param name="entityTypes"></param>
            <returns></returns>
        </member>
        <member name="P:Shesha.Models.TokenAuth.AuthenticateModel.IMEI">
            <summary>
            Optional IMEI number. Is used for mobile applications
            </summary>
        </member>
        <member name="T:Shesha.Mvc.ShaFileContentResult">
            <summary>
            Custom implementation of FileContentResult
            </summary>
        </member>
        <member name="M:Shesha.Permissions.IPermissionedObjectManager.GetObjectType(System.Type)">
            <summary>
            Get category of Protected Object for Type or NULL if not protected
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Permissions.IPermissionedObjectManager.GetAllFlatAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Get list of protected objects
            </summary>
            <param name="category">Filter by Category</param>
            <param name="showHidden">Show hidden protected objects</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Permissions.IPermissionedObjectManager.GetAllTreeAsync(System.String,System.Boolean)">
            <summary>
            Get hierarchical list of protected objects
            </summary>
            <param name="category">Filter by Category</param>
            <param name="showHidden">Show hidden protected objects</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Permissions.IPermissionedObjectManager.GetObjectWithChild(System.String,System.Boolean)">
            <summary>
            Get Protected Object by object name with children
            </summary>
            <param name="objectName"></param>
            <param name="showHidden"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Permissions.IPermissionedObjectManager.GetOrCreateAsync(System.String,System.String,System.String,System.String,System.Boolean,Shesha.Permissions.Enum.UseDependencyType,System.Boolean)">
            <summary>
            Get Protected Object by object name
            </summary>
            <param name="objectName">Object name for search Protected Object (usually it has format "type@action")</param>
            <param name="inheritedFromName">Name of parent object </param>
            <param name="dependentFromName">Name of dependent object</param>
            <param name="useInherited">Get permission data from parent if inherited</param>
            <param name="useDependency">Get permission data from related Protected Object if it specified</param>
            <param name="useHidden">Allow to get permission data from hidden protected objects</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Permissions.IPermissionedObjectManager.GetAsync(System.String,System.Boolean,Shesha.Permissions.Enum.UseDependencyType,System.Boolean)">
            <summary>
            Get Protected Object by object name
            </summary>
            <param name="objectName">Object name for search Protected Object (usually it has format "type@action")</param>
            <param name="useInherited">Get permission data from parent if inherited</param>
            <param name="useDependency">Get permission data from related Protected Object if it specified</param>
            <param name="useHidden">Allow to get permission data from hidden protected objects</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Permissions.IPermissionedObjectManager.Get(System.String,System.Boolean,Shesha.Permissions.Enum.UseDependencyType,System.Boolean)">
            <summary>
            Get Protected Object by object name
            </summary>
            <param name="objectName">Object name for search Protected Object (usually it has format "type@action")</param>
            <param name="useInherited">Get permission data from parent if inherited</param>
            <param name="useDependency">Get permission data from related Protected Object if it specified</param>
            <param name="useHidden">Allow to get permission data from hidden protected objects</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Permissions.IPermissionedObjectManager.SetAsync(Shesha.Permissions.PermissionedObjectDto)">
            <summary>
            Set Protected Object data (save to DB and cache)
            </summary>
            <param name="permissionedObject">Protected Object data</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Permissions.IPermissionedObjectManager.SetPermissionsAsync(System.String,Shesha.Domain.Enums.RefListPermissionedAccess,System.Collections.Generic.List{System.String})">
            <summary>
            Set permission data for Protected Object by object name
            </summary>
            <param name="objectName">Object name for search Protected Object (usually it has format "type@action")</param>
            <param name="access">Get permission data from the parent Protected Object if value is Inherited</param>
            <param name="permissions">Required permissions for Protected Object. Will be ignored if Inherited is True</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Permissions.IPermissionedObjectManager.ClearCacheAsync">
            <summary>
            Clear protected objects cache
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shesha.QuickSearch.IQuickSearcher">
            <summary>
            Entity quick searcher
            </summary>
        </member>
        <member name="M:Shesha.QuickSearch.IQuickSearcher.GetQuickSearchExpression``1(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Get quick search linq expression
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="quickSearch">Quick search text</param>
            <param name="properties">List of properties to search. Supports dot notation (e.g. User.Username)</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.QuickSearch.IQuickSearcher.GetQuickSearchExpression``1(System.String)">
            <summary>
            Get quick search linq expression. Uses root level properties of the specified entity
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="quickSearch">Quick search text</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.QuickSearch.IQuickSearcher.ApplyQuickSearch``1(System.Linq.IQueryable{``0},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Apply quick search to a specified <paramref name="queryable"/>
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <param name="queryable">Queryable to be filtered</param>
            <param name="quickSearch">Quick search text</param>
            <param name="properties">List of properties to search. Supports dot notation (e.g. User.Username)</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.QuickSearch.IQuickSearcher.ApplyQuickSearch``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Apply quick search to a specified <paramref name="queryable"/>. Searches by root level properties of the specified entity
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <param name="queryable">Queryable to be filtered</param>
            <param name="quickSearch">Quick search text</param>
            <returns></returns>
        </member>
        <member name="T:Shesha.QuickSearch.QuickSearcher">
            <summary>
            Entity quick searcher
            </summary>
        </member>
        <member name="P:Shesha.QuickSearch.QuickSearcher.QuickSearchPropertiesCache">
            <summary>
            Cache of the quick search properties
            </summary>
        </member>
        <member name="M:Shesha.QuickSearch.QuickSearcher.GetQuickSearchExpression``1(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Get quick search expression for the specified entity type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="quickSearch">Quick search text</param>
            <param name="properties">List of properties in dot notation (e.g. FirstName, User.Username, AccountType)</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.QuickSearch.QuickSearcher.GetQuickSearchExpression``1(System.String)">
            <summary>
            Get quick search linq expression. Uses root level properties of the specified entity
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="quickSearch">Quick search text</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.QuickSearch.QuickSearcher.GetQuickSearchExpression``1(System.String,System.Collections.Generic.List{System.String},System.Linq.Expressions.ParameterExpression)">
            <summary>
            Get quick search expression for the specified entity type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="quickSearch">Quick search text</param>
            <param name="properties">List of properties in dot notation (e.g. FirstName, User.Username, AccountType)</param>
            <param name="parameter">Parameter expression</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.QuickSearch.QuickSearcher.ApplyQuickSearch``1(System.Linq.IQueryable{``0},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Apply quick search to a specified <paramref name="queryable"/>
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <param name="queryable">Queryable to be filtered</param>
            <param name="quickSearch">Quick search text</param>
            <param name="properties">List of properties to search. Supports dot notation (e.g. User.Username)</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.QuickSearch.QuickSearcher.ApplyQuickSearch``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Apply quick search to a specified <paramref name="queryable"/>. Searches by root level properties of the specified entity
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <param name="queryable">Queryable to be filtered</param>
            <param name="quickSearch">Quick search text</param>
            <returns></returns>
        </member>
        <member name="T:Shesha.QuickSearch.QuickSearcher.RefListItemComparer">
            <summary>
            Delegate that returns comparison rule for the reference list item
            </summary>
            <param name="entityPropertyExpression">Entity property expression</param>
            <param name="refListItemExpression">Reference list item value expression</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.QuickSearch.QuickSearcher.GetCommonRefListExpression(System.String,System.String,System.String,System.String,System.Linq.Expressions.ParameterExpression,Shesha.QuickSearch.QuickSearcher.RefListItemComparer)">
            <summary>
            Get common reference list item comparison expression
            </summary>
            <param name="namespace">Reference list namespace</param>
            <param name="name">Reference list name</param>
            <param name="propName">Name of the entity property</param>
            <param name="quickSearch">Quick search text</param>
            <param name="entityExpression">Entity parameter expression (i.e. `e` part in the `e => foo`)</param>
            <param name="comparer">Comparison rule</param>
            <returns></returns>
        </member>
        <member name="T:Shesha.QuickSearch.QuickSearcher.Binder">
            <summary>
            Commin binder of two expression
            </summary>
            <param name="left">Left expression</param>
            <param name="right">Right expression</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.QuickSearch.QuickSearcher.CombineExpressions(System.Collections.Generic.List{System.Linq.Expressions.Expression},Shesha.QuickSearch.QuickSearcher.Binder,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Combine expressions list using specified <paramref name="binder"/>
            </summary>
            <param name="expressions">List of expressions to bind</param>
            <param name="binder">Binder (e.g. Expression.OrElse)</param>
            <param name="param">Parameter expression (i.e. `e` part in the `e => foo`)</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.QuickSearch.QuickSearcher.GetPropertiesForSqlQuickSearch``1(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Get detailed properties information required for quick search
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <param name="properties">List of properties in dot notation (e.g. FirstName, User.Username, AccountType)</param>
            <param name="cacheKey">Cache key. Live null to skip caching</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.QuickSearch.QuickSearcher.DoGetPropertiesForSqlQuickSearch``1(System.Collections.Generic.List{System.String})">
            <summary>
            Get detailed properties information required for quick search
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <param name="properties">List of properties in dot notation (e.g. FirstName, User.Username, AccountType)</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.QuickSearch.QuickSearcher.GetTopLevelProperties``1">
            <summary>
            Get names of the root level properties
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Shesha.QuickSearch.QuickSearchPropertyInfo">
            <summary>
            Quick search property info
            </summary>
        </member>
        <member name="P:Shesha.QuickSearch.QuickSearchPropertyInfo.Name">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:Shesha.QuickSearch.QuickSearchPropertyInfo.DataType">
            <summary>
            General datatype
            </summary>
        </member>
        <member name="P:Shesha.QuickSearch.QuickSearchPropertyInfo.ReferenceListNamespace">
            <summary>
            Referencelist namespace
            </summary>
        </member>
        <member name="P:Shesha.QuickSearch.QuickSearchPropertyInfo.ReferenceListName">
            <summary>
            Referencelist name
            </summary>
        </member>
        <member name="T:Shesha.RabbitMQ.Attributes.TypeAliasAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Shesha.RabbitMQ.Attributes.TypeAliasAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Shesha.RabbitMQ.Attributes.TypeAliasAttribute.IsDefault">
            <summary>
            
            </summary>
        </member>
        <member name="M:Shesha.RabbitMQ.Attributes.TypeAliasAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Shesha.RabbitMQ.Extensions.RabbitMqExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Shesha.RabbitMQ.Extensions.RabbitMqExtensions.PublishHeaderMessage``1(EasyNetQ.IBus,System.String,System.String,System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bus"></param>
            <param name="exchangeName"></param>
            <param name="apiKey"></param>
            <param name="routingkey"></param>
            <param name="message"></param>
        </member>
        <member name="M:Shesha.RabbitMQ.Extensions.RabbitMqExtensions.Publish``1(EasyNetQ.IBus,System.String,System.String,``0,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bus"></param>
            <param name="exchangeName"></param>
            <param name="type"></param>
            <param name="message"></param>
            <param name="routingKey"></param>
        </member>
        <member name="M:Shesha.RabbitMQ.Extensions.RabbitMqExtensions.PublishAsync``1(EasyNetQ.IBus,System.String,System.String,``0,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bus"></param>
            <param name="exchangeName"></param>
            <param name="type"></param>
            <param name="message"></param>
            <param name="routingKey"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.RabbitMQ.Extensions.RabbitMqExtensions.Publish``1(EasyNetQ.IBus,System.String,``0,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bus"></param>
            <param name="exchangeName"></param>
            <param name="message"></param>
            <param name="topic"></param>
        </member>
        <member name="M:Shesha.RabbitMQ.Extensions.RabbitMqExtensions.PublishAsync``1(EasyNetQ.IBus,System.String,``0,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bus"></param>
            <param name="exchangeName"></param>
            <param name="message"></param>
            <param name="topic"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.RabbitMQ.SheshaMQConventions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Shesha.RabbitMQ.SheshaMQConventions.#ctor(EasyNetQ.ITypeNameSerializer)">
            <summary>
            
            </summary>
            <param name="typeNameSerializer"></param>
        </member>
        <member name="T:Shesha.Reflection.DocsByReflection">
            <summary>
            Utility class to provide documentation for various types where available with the assembly
            </summary>
        </member>
        <member name="M:Shesha.Reflection.DocsByReflection.XMLFromMember(System.Reflection.MethodInfo)">
            <summary>
            Provides the documentation comments for a specific method
            </summary>
            <param name="methodInfo">The MethodInfo (reflection data ) of the member to find documentation for</param>
            <returns>The XML fragment describing the method</returns>
        </member>
        <member name="M:Shesha.Reflection.DocsByReflection.XMLFromMember(System.Reflection.MemberInfo)">
            <summary>
            Provides the documentation comments for a specific member
            </summary>
            <param name="memberInfo">The MemberInfo (reflection data) or the member to find documentation for</param>
            <returns>The XML fragment describing the member</returns>
        </member>
        <member name="M:Shesha.Reflection.DocsByReflection.XMLFromType(System.Type)">
            <summary>
            Provides the documentation comments for a specific type
            </summary>
            <param name="type">Type to find the documentation for</param>
            <returns>The XML fragment that describes the type</returns>
        </member>
        <member name="M:Shesha.Reflection.DocsByReflection.XMLFromName(System.Type,System.Char,System.String)">
            <summary>
            Obtains the XML Element that describes a reflection element by searching the 
            members for a member that has a name that describes the element.
            </summary>
            <param name="type">The type or parent type, used to fetch the assembly</param>
            <param name="prefix">The prefix as seen in the name attribute in the documentation XML</param>
            <param name="name">Where relevant, the full name qualifier for the element</param>
            <returns>The member that has a name that describes the specified reflection element</returns>
        </member>
        <member name="F:Shesha.Reflection.DocsByReflection.cache">
            <summary>
            A cache used to remember Xml documentation for assemblies
            </summary>
        </member>
        <member name="F:Shesha.Reflection.DocsByReflection.failCache">
            <summary>
            A cache used to store failure exceptions for assembly lookups
            </summary>
        </member>
        <member name="M:Shesha.Reflection.DocsByReflection.XMLFromAssembly(System.Reflection.Assembly)">
            <summary>
            Obtains the documentation file for the specified assembly
            </summary>
            <param name="assembly">The assembly to find the XML document for</param>
            <returns>The XML document</returns>
            <remarks>This version uses a cache to preserve the assemblies, so that 
            the XML file is not loaded and parsed on every single lookup</remarks>
        </member>
        <member name="M:Shesha.Reflection.DocsByReflection.XMLFromAssemblyNonCached(System.Reflection.Assembly)">
            <summary>
            Loads and parses the documentation file for the specified assembly
            </summary>
            <param name="assembly">The assembly to find the XML document for</param>
            <returns>The XML document</returns>
        </member>
        <member name="T:Shesha.Reflection.DocsByReflectionException">
            <summary>
            An exception thrown by the DocsByReflection library
            </summary>
        </member>
        <member name="M:Shesha.Reflection.DocsByReflectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new exception instance with the specified
            error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or null if none.</param>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.IsSubtypeOfGeneric(System.Type,System.Type)">
            <summary>
            Returns tru if the <paramref name="instanceType"/> is a closed generic of the <paramref name="genericType"/> type
            </summary>
            <param name="genericType">Generic type</param>
            <param name="instanceType">Type you want to check</param>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.HasInterface(System.Type,System.Type)">
            <summary>
            Returns true if current <paramref name="type"/> implements interface <paramref name="interface"/>
            </summary>
            <param name="type"></param>
            <param name="interface"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns true if the specified <paramref name="memberInfo"/> is marked with the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetPropertyValue(System.Object,System.String,System.Object@,System.Reflection.PropertyInfo@)">
            <summary>
            Returns the value of the property specified. 
            </summary>
            <param name="obj">Object whose property value is to be retreived.</param>
            <param name="propertyName">Name of the property or property hierarchy 
            e.g. 'Property1.SubProperty2.SubSubProperty3' </param>
            <param name="parent">Returns the parent object the last property in the hierarchy. 
            Returns null if did not manage to reach the end of the hierarchy because of null values
            along the way.</param>
            <param name="propInfo">Returns the <typeparamref name="PropertyInfo"/> of
            the last property in the property hierachy.</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetProperty(System.Object,System.String,System.Object@)">
            <summary>
            Returns the PropertyInfo for the specified property on the specified Entity.
            </summary>
            <param name="entity">The entity whose property info is to be returned.</param>
            <param name="propertyName">The name of the property to return. This could also be
            a property hiererchy where want to reach the property of a child object e.g. 'Parent.ReferencedChildEntity.ChildEntityPropertyName'. </param>
            <param name="propertyEntity">The entity which the specified property belongs to.
            Where <paramref name="propertyName"/> refers to a property on <paramref name="entity"/> this will be the same
            as <paramref name="entity"/>, but where <paramref name="propertyName"/> refers to a property on a referenced
            child object e.g. 'Parent.ReferencedChildEntity.ChildEntityPropertyName', then will return the
            child entity the property belongs to i.e. 'ReferencedChildEntity' from the example.</param>
            <returns>Return the requested PropertyInfo.</returns>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the PropertyInfo for the specified property.
            WARNING!!!: This will return the PropertyInfo where the Declaring Type is the base class.
            This may therefore cause problems if you wish to retreive Attribute information (e.g. ReferenceList attribute)
            from sub-classes.
            </summary>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the PropertyInfo for the specified property.
            WARNING!!!: This will return the PropertyInfo where the Declaring Type is the base class.
            This may therefore cause problems if you wish to retreive Attribute information (e.g. ReferenceList attribute)
            from sub-classes.
            </summary>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.StripCastleProxyType(System.Type)">
            <summary>
            Strips the proxy type generated by NHibernate (using Castle proxy) that typically 'wraps' 
            domain types. This is necessary as the proxy types sometimes interfere / cause unexpected results
            when performing reflection.
            </summary>
            <param name="type">Type</param>
            <returns>Returns <paramref name="type"/> if type is not a proxy class, else returns the BaseType of type.</returns>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.FindPropertyWithUniqueAttribute(System.Type,System.Type)">
            <summary>
            Looks for a specified custom attribute on a classes' properties. Only a single
            property is allowed to be marked with the specified attribute or an exception is thrown.
            If the attribute is not found on the specified type, method will iterate
            through the type hierarchy to try to find the attribute on base types.
            </summary>
            <param name="type">Type whose properties to look through.</param>
            <param name="attributeType">The custom attribute to look for.</param>
            <returns>Returns the <typeparamref name="PropertyInfo"/> of property marked with the 
            specified attribute. Returns Null if no property was marked with the specified attribute.
            If more than one property is marked with the attribute a <typeparamref name="ConfigurationException"/> is thrown.</returns>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.IsNullableType(System.Type)">
            <summary>
            Checks if a given type is Nullable e.g. int?.
            </summary>
            <param name="type">Type to check.</param>
            <returns>Returns true if type is nullable, else returns false.</returns>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetUnderlyingTypeIfNullable(System.Type)">
            <summary>
            Checks to see if the specified type is Nullable and if so returns its underlying type, 
            otherwise returns the original type.
            </summary>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.IsEnumType(System.Type)">
            <summary>
            Indicates is the specified type an enum or nullable enum
            </summary>
            <param name="type">Type to check</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Shesha.Reflection.ReflectionHelper.GetNonNullableType(System.Type)" -->
        <!-- Badly formed XML comment ignored for member "M:Shesha.Reflection.ReflectionHelper.IsInstanceOfGenericType(System.Type,System.Object)" -->
        <member name="M:Shesha.Reflection.ReflectionHelper.GetDisplayName(System.Reflection.PropertyInfo)">
            <summary>
            Return display name of the specified property
            </summary>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetDisplayName(System.Type)">
            <summary>
            Return display name of the specified type
            </summary>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetDescription(System.Reflection.PropertyInfo)">
            <summary>
            Return description of the specified property
            </summary>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetDescription(System.Type)">
            <summary>
            Return description of the specified property
            </summary>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetEnumDescription(System.Type,System.Nullable{System.Int64})">
            <summary>
            Returns description of enum item
            </summary>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetEnumDescription(System.Type,System.String)">
            <summary>
            Returns description of enum item
            </summary>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetEnumItemAttribute``1(System.Type,System.String)">
            <summary>
            Returns attribute of enum item
            </summary>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.IsMultiValueReferenceListProperty(System.Reflection.MemberInfo)">
            <summary>
            Indicates is the specified property is a multivalue Reference List property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.IsReferenceListProperty(System.Reflection.MemberInfo)">
            <summary>
            Indicates is the specified property uses a Reference List values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetReferenceListIdentifierOrNull(System.Reflection.MemberInfo)">
            <summary>
            Returns <see cref="T:Shesha.Domain.ReferenceListIdentifier"/> for the specified property. Full name 
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.FlagEnumToListOfValues(System.Type,System.Int64)">
            <summary>
            Returns list of selected values for a flag enum
            </summary>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetClassUid(System.Type)">
            <summary>
            Returns class Uid or null of the specified class. Class Uid can be specified using <see cref="T:Shesha.Attributes.ClassUidAttribute"/>
            </summary>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetEnumItemIsVisible``1(``0)">
            <summary>
            Returns whether this enum item must be shown in enum dropdowns or not
            </summary>
        </member>
        <member name="M:Shesha.Reflection.ReflectionHelper.GetProperty(System.Type,System.String,System.Boolean)">
            <summary>
            Search property with specified name in the current type. Supports dot notation
            </summary>
            <param name="type">Root type</param>
            <param name="propertyName">Name of property, supports dot notation</param>
            <param name="useCamelCase">Set to true to compare property names in camel case</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.CompressionService.CompressFilesToStream(System.Collections.Generic.Dictionary{System.String,System.String},System.IO.Stream)">
            <summary>
            Compress files to stream
            </summary>
            <param name="files">Dictionary of files. Key - file name, Value - file path</param>
            <param name="stream">zip stream</param>
        </member>
        <member name="T:Shesha.Services.FileExtensionContentTypeProvider">
            <summary>
            Provides a mapping between file extensions and MIME types.
            </summary>
        </member>
        <member name="M:Shesha.Services.FileExtensionContentTypeProvider.#ctor">
            <summary>
            Creates a new provider with a set of default mappings.
            </summary>
        </member>
        <member name="M:Shesha.Services.FileExtensionContentTypeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a lookup engine using the provided mapping.
            It is recommended that the IDictionary instance use StringComparer.OrdinalIgnoreCase.
            </summary>
            <param name="mapping"></param>
        </member>
        <member name="P:Shesha.Services.FileExtensionContentTypeProvider.Mappings">
            <summary>
            The cross reference table of file extensions and content-types.
            </summary>
        </member>
        <member name="M:Shesha.Services.FileExtensionContentTypeProvider.TryGetContentType(System.String,System.String@)">
            <summary>
            Given a file path, determine the MIME type
            </summary>
            <param name="subpath">A file path</param>
            <param name="contentType">The resulting MIME type</param>
            <returns>True if MIME type could be determined</returns>
        </member>
        <member name="T:Shesha.Services.IDynamicRepository">
            <summary>
            Dynamic repository, allows to manipulate entities of different types using type reference or <see cref="P:Shesha.Configuration.Runtime.EntityConfiguration.TypeShortAlias"/>
            </summary>
        </member>
        <member name="M:Shesha.Services.IDynamicRepository.GetAsync(System.String,System.String)">
            <summary>
            Returns entity of the specified type (by <paramref name="entityTypeShortAlias"/>) with the specified Id
            </summary>
            <param name="entityTypeShortAlias">TypeShortAlias of the entity</param>
            <param name="id">Id of the entity</param>
        </member>
        <member name="M:Shesha.Services.IDynamicRepository.Get(System.String,System.String)">
            <summary>
            Returns entity of the specified type (by <paramref name="entityTypeShortAlias"/>) with the specified Id
            </summary>
            <param name="entityTypeShortAlias">TypeShortAlias of the entity</param>
            <param name="id">Id of the entity</param>
        </member>
        <member name="M:Shesha.Services.IDynamicRepository.GetAsync(System.Type,System.String)">
            <summary>
            Returns entity of the specified type (<paramref name="entityType"/>) with the specified Id
            </summary>
            <param name="entityType">Type of the entity</param>
            <param name="id">Id of the entity</param>
        </member>
        <member name="M:Shesha.Services.IDynamicRepository.Get(System.Type,System.String)">
            <summary>
            Returns entity of the specified type (<paramref name="entityType"/>) with the specified Id
            </summary>
            <param name="entityType">Type of the entity</param>
            <param name="id">Id of the entity</param>
        </member>
        <member name="M:Shesha.Services.IDynamicRepository.SaveOrUpdateAsync(System.Object)">
            <summary>
            Saves or update specified entity
            </summary>
        </member>
        <member name="M:Shesha.Services.IDynamicRepository.DeleteAsync(System.Object)">
            <summary>
            Delete specified entity
            </summary>
        </member>
        <member name="M:Shesha.Services.IDynamicRepository.Query``1">
            <summary>
            Returns queryable source (<see cref="T:System.Linq.IQueryable"/>) with entities of the specified type
            </summary>
        </member>
        <member name="T:Shesha.Services.IReferenceListHelper">
            <summary>
            ReferenceList helper
            </summary>
        </member>
        <member name="M:Shesha.Services.IReferenceListHelper.GetItemDisplayText(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Returns display name of the <see cref="T:Shesha.Domain.ReferenceListItem"/> in the specified list
            </summary>
            <param name="refListNamespace">Namespace of the <see cref="T:Shesha.Domain.ReferenceList"/></param>
            <param name="refListName">Name of the <see cref="T:Shesha.Domain.ReferenceList"/></param>
            <param name="value">Value of the <see cref="T:Shesha.Domain.ReferenceListItem"/></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.IReferenceListHelper.DecomposeMultiValueIntoItems(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Decompose <paramref name="value"/> into list of items. Is used for MultiValueReferenceLists
            </summary>
            <param name="refListNamespace">Namespace of the reference list</param>
            <param name="refListName">Name of the reference list</param>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.IReferenceListHelper.ClearCacheAsync">
            <summary>
            Clear reference list cache
            </summary>
        </member>
        <member name="M:Shesha.Services.IReferenceListHelper.ClearCacheAsync(System.String,System.String)">
            <summary>
            Clear reference list cache
            </summary>
        </member>
        <member name="M:Shesha.Services.IStoredFileServiceBase`1.UpdateFile(`0,System.IO.Stream,System.String)">
            <summary>
            Update file content and name
            </summary>
            <param name="file">Stored file</param>
            <param name="stream">Stream with new file content</param>
            <param name="fileName">New file name</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.IStoredFileServiceBase`1.FileExists(System.Guid)">
            <summary>
            Returns tru if file exists in the DB
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.IStoredFileServiceBase`1.GetOrNull(System.Guid)">
            <summary>
            Get file by id or null if missing
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.IStoredFileServiceBase`1.DeleteAsync(Shesha.Domain.StoredFile)">
            <summary>
            Delete Stored File
            </summary>
        </member>
        <member name="M:Shesha.Services.IStoredFileServiceBase`1.Delete(Shesha.Domain.StoredFile)">
            <summary>
            Delete Stored File
            </summary>
        </member>
        <member name="T:Shesha.Services.PathProvider">
            <summary>
            Path provider, is used to map virtual paths
            </summary>
        </member>
        <member name="M:Shesha.Services.PathProvider.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Default constructor
            </summary>
            <param name="environment"></param>
        </member>
        <member name="M:Shesha.Services.PathProvider.MapPath(System.String)">
            <summary>
            Map virtual path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:Shesha.Services.ReferenceListHelper.ObjectMapper">
            <summary>
            Reference to the object to object mapper.
            </summary>
        </member>
        <member name="P:Shesha.Services.ReferenceListHelper.ListItemsCache">
            <summary>
            Cache of the ReferenceListItems
            </summary>
        </member>
        <member name="M:Shesha.Services.ReferenceListHelper.GetItemDisplayText(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Returns display name of the <see cref="T:Shesha.Domain.ReferenceListItem"/> in the specified list
            </summary>
            <param name="refListNamespace">Namespace of the <see cref="T:Shesha.Domain.ReferenceList"/></param>
            <param name="refListName">Name of the <see cref="T:Shesha.Domain.ReferenceList"/></param>
            <param name="value">Value of the <see cref="T:Shesha.Domain.ReferenceListItem"/></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.ReferenceListHelper.DecomposeMultiValueIntoItems(System.String,System.String,System.Nullable{System.Int64})">
            inheritedDoc
        </member>
        <member name="M:Shesha.Services.ReferenceListHelper.GetReferenceList(System.String,System.String)">
            <summary>
            Returns <see cref="T:Shesha.Domain.ReferenceList"/> by name and namespace
            </summary>
            <param name="nameSpace">Namespace of the <see cref="T:Shesha.Domain.ReferenceList"/></param>
            <param name="name">Name of the <see cref="T:Shesha.Domain.ReferenceList"/></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.ReferenceListHelper.GetItemsAsync(System.String,System.String)">
            <summary>
            Return reference list items
            </summary>
        </member>
        <member name="M:Shesha.Services.ReferenceListHelper.GetItems(System.String,System.String)">
            <summary>
            Return reference list items
            </summary>
        </member>
        <member name="M:Shesha.Services.ReferenceListHelper.ClearCacheAsync">
            <summary>
            Clear reference list cache
            </summary>
        </member>
        <member name="M:Shesha.Services.ReferenceListHelper.ClearCacheAsync(System.String,System.String)">
            <summary>
            Clear reference list cache
            </summary>
        </member>
        <member name="M:Shesha.Services.ReferenceListHelper.DecomposeMultiReferenceListValue``1(``0)">
            <summary>
            Decompose raw value into a multivalue reference list DTOs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rawValue"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.Services.ReferenceLists.Dto.ReferenceListDto">
            <summary>
            Dto of the <see cref="T:Shesha.Domain.ReferenceList"/>
            </summary>
        </member>
        <member name="T:Shesha.Services.ReferenceLists.Dto.ReferenceListItemDto">
            <summary>
            Dto of the <see cref="T:Shesha.Domain.ReferenceListItem"/>
            </summary>
        </member>
        <member name="T:Shesha.Services.StaticContext">
            <summary>
            Static context, is used as a temporary solution for unit tests
            </summary>
        </member>
        <member name="P:Shesha.Services.StaticContext.IocManager">
            <summary>
            Ioc manager
            </summary>
        </member>
        <member name="M:Shesha.Services.StaticContext.SetIocManager(Abp.Dependency.IIocManager)">
            <summary>
            Set IocManager, is used in unit tests only
            </summary>
            <param name="iocManager"></param>
        </member>
        <member name="M:Shesha.Services.StoredFiles.AzureStoredFileService.GetConnectionString">
            <summary>
            Returns connection string. Note: for the Azure environment - uses standard environment variable
            </summary>
        </member>
        <member name="M:Shesha.Services.StoredFiles.AzureStoredFileService.UpdateVersionContentAsync(Shesha.Domain.StoredFileVersion,System.IO.Stream)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Services.StoredFiles.AzureStoredFileService.CopyFile(Shesha.Domain.StoredFileVersion,Shesha.Domain.StoredFileVersion)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Services.StoredFiles.AzureStoredFileService.DeleteFromStorageAsync(Shesha.Domain.StoredFileVersion)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Services.StoredFiles.AzureStoredFileService.DeleteFromStorage(Shesha.Domain.StoredFileVersion)">
            inheritedDoc
        </member>
        <member name="T:Shesha.Services.StoredFiles.StoredFileService">
            <summary>
            Stored file service
            </summary>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileService.PhysicalFilePath(Shesha.Domain.StoredFile)">
            <summary>
            Returns physical path of the latest version of the specified <paramref name="file"/>
            </summary>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileService.PhysicalFilePath(Shesha.Domain.StoredFileVersion)">
            <summary>
            Returns physical path of the specified version of the specified <paramref name="file"/>
            </summary>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileService.CopyFile(Shesha.Domain.StoredFileVersion,Shesha.Domain.StoredFileVersion)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileService.UpdateVersionContentAsync(Shesha.Domain.StoredFileVersion,System.IO.Stream)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileService.DeleteFromStorageAsync(Shesha.Domain.StoredFileVersion)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileService.DeleteFromStorage(Shesha.Domain.StoredFileVersion)">
            inheritedDoc
        </member>
        <member name="F:Shesha.Services.StoredFiles.StoredFileServiceBase.FileRepository">
            <summary>
            File repository
            </summary>
        </member>
        <member name="F:Shesha.Services.StoredFiles.StoredFileServiceBase.VersionRepository">
            <summary>
            Version repository
            </summary>
        </member>
        <member name="P:Shesha.Services.StoredFiles.StoredFileServiceBase.EntityConfigurationStore">
            <summary>
            Entity configuration store
            </summary>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.GetAttachmentsOfCategoryAsync``1(Abp.Domain.Entities.IEntity{``0},System.Nullable{System.Int64})">
            <summary>
            Returns list of files attached to the specified entity with the specified <paramref name="fileCategory"/>
            </summary>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.GetAttachmentsOfCategoryAsync``1(``0,System.String,System.Nullable{System.Int64})">
            <summary>
            Returns list of files attached to the entity with the specified <paramref name="id"/>, <paramref name="typeShortAlias"/> and <paramref name="fileCategory"/>
            </summary>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.GetAttachmentsAsync``1(Abp.Domain.Entities.IEntity{``0})">
            <summary>
            Returns list of files attached to the specified entity irrespectively of file category
            </summary>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.GetAttachmentsAsync``1(``0,System.String)">
            <summary>
            Returns list of files attached to the entity with the specified <paramref name="id"/>, <paramref name="typeShortAlias"/>
            </summary>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.GetStreamAsync(Shesha.Domain.StoredFile)">
            <summary>
            Returns content of last version for specified file
            </summary>
            <param name="file">StoredFile object</param>
            <returns>file content</returns>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.CopyToOwnerAsync``1(Shesha.Domain.StoredFile,Abp.Domain.Entities.IEntity{``0},System.Boolean)">
            <summary>
            Copy file to a new owner
            </summary>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.CopyAttachmentsToAsync``2(Abp.Domain.Entities.IEntity{``0},Abp.Domain.Entities.IEntity{``1})">
            <summary>
            Copy files to new owner
            </summary>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.GetAttachmentsCategoriesAsync``1(Abp.Domain.Entities.IEntity{``0})">
            <summary>
            Returns list of file categories of the files attached  to the specified owner
            </summary>
            <typeparam name="TId"></typeparam>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.GetNewOrDefaultVersionAsync(Shesha.Domain.StoredFile)">
            <summary>
            Create new version for the specified file and return StoredFileVersion object.
            If file isn't version controlled - default version will be returned
            </summary>
            <param name="file">file object</param>
            <returns>StoredFileVersion object (not saved to DB if file is version controlled)</returns>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.RenameFileAsync(Shesha.Domain.StoredFile,System.String)">
            <summary>
            Renames specified <paramref name="file"/>
            </summary>
            <param name="file"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.GetLastVersionAsync(Shesha.Domain.StoredFile)">
            <summary>
            Returns last version of the <paramref name="file"/>
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.GetLastVersion(Shesha.Domain.StoredFile)">
            <summary>
            Returns last version of the <paramref name="file"/>
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.GetFileVersionsAsync(Shesha.Domain.StoredFile)">
            <summary>
            Returns all versions of the specified <paramref name="file"/>
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.GetNextSortOrder``1(``0,System.String,System.Nullable{System.Int64})">
            <summary>
            returns next SortOrder for the new file
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Shesha.Services.StoredFiles.StoredFileServiceBase.MakeUniqueFileNames(System.Collections.Generic.IList{Shesha.Domain.StoredFile})" -->
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.FileExists(System.Guid)">
            <summary>
            Returns tru if file exists in the DB
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.GetOrNull(System.Guid)">
            <summary>
            Get file by id or null if missing
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.UpdateVersionContentAsync(Shesha.Domain.StoredFileVersion,System.IO.Stream)">
            <summary>
            Update content of the specified file version
            </summary>
            <param name="version">File version</param>
            <param name="stream">Stream with file data</param>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.UpdateFile(Shesha.Domain.StoredFile,System.IO.Stream,System.String)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.DeleteFromStorageAsync(Shesha.Domain.StoredFileVersion)">
            Delete physical file from the storage (disk/blob storage etc.)
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.DeleteFromStorage(Shesha.Domain.StoredFileVersion)">
            Delete physical file from the storage (disk/blob storage etc.)
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.DeleteAsync(Shesha.Domain.StoredFileVersion)">
            <summary>
            Delete file version from DB and storage
            </summary>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.Delete(Shesha.Domain.StoredFileVersion)">
            <summary>
            Delete file version from DB and storage
            </summary>
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.DeleteAsync(Shesha.Domain.StoredFile)">
            inheritedDoc
        </member>
        <member name="M:Shesha.Services.StoredFiles.StoredFileServiceBase.Delete(Shesha.Domain.StoredFile)">
            inheritedDoc
        </member>
        <member name="T:Shesha.Services.VersionedFields.IVersionedFieldManager">
            <summary>
            Versioned field manager
            </summary>
        </member>
        <member name="M:Shesha.Services.VersionedFields.IVersionedFieldManager.GetVersionedFieldValueAsync``2(``0,System.String)">
            <summary>
            Get versioned field value
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TId"></typeparam>
            <param name="owner"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Services.VersionedFields.IVersionedFieldManager.SetVersionedFieldValueAsync``2(``0,System.String,System.String,System.Boolean)">
            <summary>
            Set versioned field value
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TId"></typeparam>
            <param name="owner"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
            <param name="createNewVersion"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.Services.VersionedFields.VersionedFieldManager">
            <summary>
            Versioned field manager
            </summary>
        </member>
        <member name="M:Shesha.Services.VersionedFields.VersionedFieldManager.GetOrCreateFieldAsync``2(``0,System.String,System.Action{Shesha.Domain.VersionedField})">
            <summary>
            Creates versioned field is missing
            </summary>
        </member>
        <member name="T:Shesha.Specifications.ApplySpecificationsAttribute">
            <summary>
            This attribute is used to apply specifications automatically to any call of IRepository.GetAll()
            </summary>
        </member>
        <member name="P:Shesha.Specifications.ApplySpecificationsAttribute.SpecificationTypes">
            <summary>
            Types of specifications to apply.
            </summary>
        </member>
        <member name="M:Shesha.Specifications.ApplySpecificationsAttribute.#ctor(System.Type[])">
            <summary>
            Used to apply specifications to any call of IRepository.GetAll()
            </summary>
            <param name="specificationTypes">Types of specifications (<see cref="T:Abp.Specifications.ISpecification`1"/>)</param>
        </member>
        <member name="T:Shesha.Specifications.DisableSpecificationsAttribute">
            <summary>
            This attribute is used to disable all active specifications
            </summary>
        </member>
        <member name="T:Shesha.Specifications.GlobalSpecificationAttribute">
            <summary>
            Is used to mark specifications as global
            </summary>
        </member>
        <member name="P:Shesha.Specifications.GlobalSpecificationsManager.Specifications">
            inheritedDoc
        </member>
        <member name="T:Shesha.Specifications.IGlobalSpecificationsManager">
            <summary>
            Global specifications manager
            </summary>
        </member>
        <member name="P:Shesha.Specifications.IGlobalSpecificationsManager.Specifications">
            <summary>
            List of global specifications
            </summary>
        </member>
        <member name="T:Shesha.Specifications.ISpecificationInfo">
            <summary>
            Stores basic information about specifications
            </summary>
        </member>
        <member name="P:Shesha.Specifications.ISpecificationInfo.SpecificationsType">
            <summary>
            Type of specifications
            </summary>
        </member>
        <member name="P:Shesha.Specifications.ISpecificationInfo.EntityType">
            <summary>
            Type of Entity
            </summary>
        </member>
        <member name="T:Shesha.Specifications.ISpecificationManager">
            <summary>
            Provides access to a list of specifications that should be applied in current execution context. Includes both global specifications and custom ones (e.g. applied to concrete API endpoints)
            </summary>
        </member>
        <member name="P:Shesha.Specifications.ISpecificationManager.SpecificationTypes">
            <summary>
            List of specifications in current execution context
            </summary>
        </member>
        <member name="M:Shesha.Specifications.ISpecificationManager.ApplySpecifications``1(System.Linq.IQueryable{``0})">
            <summary>
            Apply all specifications of the current context
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="queryable">Queryable to apply specifications</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Specifications.ISpecificationManager.GetSpecifications``1">
            <summary>
            Get active specification from current context
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Shesha.Specifications.ISpecificationManager.Use``2">
            <summary>
            Activate specifications context
            </summary>
            <typeparam name="TSpec">Type of specifications</typeparam>
            <typeparam name="TEntity">Type of entity</typeparam>
            <returns></returns>
        </member>
        <member name="M:Shesha.Specifications.ISpecificationManager.Use(System.Type[])">
            <summary>
            Activate specifications context
            </summary>
            <param name="specificationType">Type of specifications</param>
        </member>
        <member name="M:Shesha.Specifications.ISpecificationManager.DisableSpecifications">
            <summary>
            Disables all specifications activate using current specifications manager
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shesha.Specifications.ISpecificationsContext">
            <summary>
            Specifications context
            </summary>
        </member>
        <member name="P:Shesha.Specifications.ISpecificationsContext.Id">
            <summary>
            Unique id of this context
            </summary>
        </member>
        <member name="E:Shesha.Specifications.ISpecificationsContext.Disposed">
            <summary>
            This event is raised when this context is disposed.
            </summary>
        </member>
        <member name="T:Shesha.Specifications.ShaSpecification`1">
            <summary>
            Represents the base class for Shesha specifications.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Shesha.Specifications.ShaSpecification`1.IsSatisfiedBy(`0)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the specification
            is satisfied by the given object.
            </summary>
            <param name="obj">The object to which the specification is applied.</param>
            <returns>True if the specification is satisfied, otherwise false.</returns>
        </member>
        <member name="M:Shesha.Specifications.ShaSpecification`1.BuildExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="M:Shesha.Specifications.ShaSpecification`1.op_Implicit(Shesha.Specifications.ShaSpecification{`0})~System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}">
            <summary>
            Implicitly converts a specification to expression.
            </summary>
            <param name="specification"></param>
        </member>
        <member name="T:Shesha.Specifications.SpecificationInfo">
            <summary>
            Stores basic information about specifications
            </summary>
        </member>
        <member name="P:Shesha.Specifications.SpecificationInfo.SpecificationsType">
            <summary>
            Type of specifications
            </summary>
        </member>
        <member name="P:Shesha.Specifications.SpecificationInfo.EntityType">
            <summary>
            Type of Entity
            </summary>
        </member>
        <member name="T:Shesha.Specifications.SpecificationManager">
            <summary>
            Provides access to a list of specifications that should be applied in current execution context. Includes both global specifications and custom ones (e.g. applied to concrete API endpoints)
            </summary>
        </member>
        <member name="T:Shesha.Specifications.SpecificationManagerState">
            <summary>
            Specifications menager state
            </summary>
        </member>
        <member name="T:Shesha.Specifications.SpecificationsActionFilter">
            <summary>
            Specifications action filter. Allows to automatically apply specifications to endpoints
            </summary>
        </member>
        <member name="T:Shesha.Specifications.SpecificationsContext">
            <summary>
            Specifications context
            </summary>
        </member>
        <member name="P:Shesha.Specifications.SpecificationsContext.SpecificationsType">
            inheritedDoc
        </member>
        <member name="P:Shesha.Specifications.SpecificationsContext.Id">
            inheritedDoc
        </member>
        <member name="P:Shesha.Specifications.SpecificationsContext.EntityType">
            inheritedDoc
        </member>
        <member name="M:Shesha.Specifications.SpecificationsContext.#ctor(System.Type,System.Type)">
            <summary>
            Default constructor
            </summary>
            <param name="specificationsType">Specification type</param>
            <param name="entityType">Entity type</param>
        </member>
        <member name="E:Shesha.Specifications.SpecificationsContext.Disposed">
            inheritedDoc
        </member>
        <member name="M:Shesha.Specifications.SpecificationsContext.OnDisposed">
            <summary>
            Called to trigger <see cref="E:Shesha.Specifications.SpecificationsContext.Disposed"/> event.
            </summary>
        </member>
        <member name="P:Shesha.Specifications.SpecificationsContext.IsDisposed">
            <summary>
            Gets a value indicates that this unit of work is disposed or not.
            </summary>
        </member>
        <member name="M:Shesha.Specifications.SpecificationsContext.Dispose">
            inheritedDoc
        </member>
        <member name="T:Shesha.Specifications.SpecificationsHelper">
            <summary>
            Specifications helper
            </summary>
        </member>
        <member name="M:Shesha.Specifications.SpecificationsHelper.GetSpecificationsInfo(System.Type)">
            <summary>
            Get specifications info for specified <paramref name="specificationType"/>
            </summary>
            <param name="specificationType">Type of specifications</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Specifications.SpecificationsHelper.IsSpecificationType(System.Type)">
            <summary>
            Returns true if the specified <paramref name="type"/> implements <see cref="T:Abp.Specifications.ISpecification`1"/>
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Shesha.Swagger.AbpAppServiceApiVersionSpecification">
            <summary>
            
            </summary>
        </member>
        <member name="P:Shesha.Swagger.CachingSwaggerProvider.SwaggerCache">
            <summary>
            Cache of the Swagger docs
            </summary>
        </member>
        <member name="M:Shesha.Swagger.SwaggerHelper.AddDocumentsPerService(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            Add separate Swagger documents for each Application Service and Controller
            Url format: `/swagger/service:{ApplicationService or controller name}/swagger.json`
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Shesha.Swagger.SwaggerOperationFilter.GetSingleAttributeOfMemberOrDeclaringTypeOrDefault``1(System.Reflection.MemberInfo,``0,System.Boolean)">
            <summary>
            Copied from ABP
            Tries to gets an of attribute defined for a class member and it's declaring type including inherited attributes.
            Returns default value if it's not declared at all.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
            <param name="defaultValue">Default value (null as default)</param>
            <param name="inherit">Inherit attribute from base classes</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Shesha.Utilities.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})" -->
        <!-- Badly formed XML comment ignored for member "M:Shesha.Utilities.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})" -->
        <member name="T:Shesha.Utilities.DateHelper">
            <summary>
            Utility functions relating to dates.
            </summary>
        </member>
        <member name="M:Shesha.Utilities.DateHelper.ToPrettyFormat(System.DateTime)">
            <summary>
            The returns a date formatted to be more user friendly e.g. 'yesterday' or '2 days ago'.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Shesha.Utilities.DateHelper.ToUnixTimestampJs(System.DateTime)">
            <summary>
            Returns numeric representation of the specified DateTime to pass to JavaScripts
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.DateHelper.GetDateTimeFromUnixTimestampJs(System.Double)">
            <summary>
            Converts Unix Timestamp passed rom JavaScript to DateTime
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.DateHelper.GetFinancialYear(System.DateTime,System.Int32)">
            <summary>
            Extension method to get the start of the financial year
            </summary>    
        </member>
        <member name="M:Shesha.Utilities.DateHelper.Truncate(System.DateTime,System.TimeSpan)">
            <summary>
            Truncate datetime to the given interval of time
            </summary>
        </member>
        <member name="M:Shesha.Utilities.DateHelper.Truncate(System.Nullable{System.DateTime},System.TimeSpan)">
            <summary>
            Truncate datetime to the given interval of time
            </summary>
        </member>
        <member name="M:Shesha.Utilities.DateHelper.FormatDate(System.DateTime)">
            <summary>
            Formats date with the default format
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.DateHelper.StripSeconds(System.DateTime)">
            <summary>
            Strip seconds from the <see cref="T:System.DateTime"/> value
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.DateHelper.StripSeconds(System.TimeSpan)">
            <summary>
            Strip seconds from the <see cref="T:System.TimeSpan"/> value
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.Utilities.ExpressionHelper">
            <summary>
            Utility class to get the text from an Expression.
            Taken from System.Web.Mvc.ExpressionHelper but modified to support Convert operations.
            </summary>
        </member>
        <member name="T:Shesha.Utilities.FileHelper">
            <summary>
            Provides basic function for files handing
            </summary>
        </member>
        <member name="M:Shesha.Utilities.FileHelper.CleanupFileName(System.String)">
            <summary>
            Cleans up a filename uploaded from the web application
            </summary>
        </member>
        <member name="M:Shesha.Utilities.FileHelper.GetMD5(System.String)">
            <summary>
            Returns MD5 hash of the specified <paramref name="fileName"/>
            </summary>
        </member>
        <member name="M:Shesha.Utilities.FileHelper.GetMD5(System.Byte[])">
            <summary>
            Returns MD5 hash of the specified bytes
            </summary>
        </member>
        <member name="M:Shesha.Utilities.FileHelper.GetMD5(System.IO.Stream)">
            <summary>
            Returns MD5 hash of the specified stream
            </summary>
        </member>
        <member name="T:Shesha.Utilities.IPathHelper">
            <summary>
             Path helper
            </summary>
        </member>
        <member name="M:Shesha.Utilities.IPathHelper.Combine(System.String[])">
            <summary>
            Performs similar function to Path.Combine() which combine multiple file path segments into
            a final path. Key differences are:
            - can handle path segments which are denoted as virtual paths i.e. starting with '~/'
            - removes the '/' at the start of any path segment so that it is treated as a path relative to the previous segments.
            </summary>
        </member>
        <member name="M:Shesha.Utilities.IPathHelper.EscapeFilename(System.String)">
            <summary>
            Replaces any illegal character in a file name.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.IPathHelper.MapVirtualPath(System.String)">
            <summary>
            Maps a virtual path to a physical one similar to HostingEnvironment.MapPath(path)
            but simply provides a fallback if application is running outside of a Web Hosting context.
            e.g. when running Unit Tests.
            </summary>
            <param name="path">Path to be mapped.</param>
        </member>
        <member name="M:Shesha.Utilities.MvcHelper.GetControllerName(System.Type)">
            <summary>
            Get controller name for specified <paramref name="controllerType"/>
            </summary>
            <param name="controllerType"></param>
            <returns></returns>
        </member>
        <member name="T:Shesha.Utilities.Parser">
            <summary>
            Utility class to help with the parsing of strings into various types of values used within Shesha applications.
            All string parsing into value should be occur within this class for consistency in parsing logic througout.
            </summary>
        </member>
        <member name="M:Shesha.Utilities.Parser.TryParseToValueType(System.String,System.Type,System.Object@,System.String,System.Boolean,System.Boolean)">
            <summary>
            Tries to convert from a string value to the specified Property's type.
            </summary>
            <param name="propInfo">PropertyInfo of the target property. The property's type must be a Value type.</param>
            <param name="value">Value as a string to convert.</param>
            <param name="parsedValue">The converted value if successful.</param>
            <param name="format">A format string, describing the format of the <paramref name="value"/> parameter</param>
            <returns>Returns true if the value could be converted successfully to the target property's type.</returns>
        </member>
        <member name="M:Shesha.Utilities.Parser.ParseToTargetPropertyType(System.String,System.Reflection.PropertyInfo,System.Boolean@,System.String,System.Boolean)">
            <summary>
            Parses a string value into the type the specified entity property would expect.
            </summary>
            <param name="value">String value to be parsed.</param>
            <param name="propInfo">PropertyInfo for the entity property into which the parsed value should be able to be set.</param>
            <param name="hasNewEntityIndicator">The returned value only has meaning in cases where the entity property is an entity references.
            If so this will be set to true if the parsed value indicates that the entity reference should be for a new entity.</param>
            <param name="format">A format string to help with the parsing.</param>
            <returns>Returns the parsed value in the appropriate type.</returns>
        </member>
        <member name="M:Shesha.Utilities.Parser.ParseId(System.String,System.Type)">
            <summary>
            Parses the Id of the entity of the specified type
            </summary>
        </member>
        <member name="T:Shesha.Utilities.PathHelper">
            <summary>
            Utility functions relating to file paths.
            </summary>
        </member>
        <member name="P:Shesha.Utilities.PathHelper.IocManager">
            <summary>
            Default constructor
            </summary>
            <param name="webHostEnvironment"></param>
        </member>
        <member name="M:Shesha.Utilities.PathHelper.Combine(System.String[])">
            <summary>
            Performs similar function to Path.Combine() which combine multiple file path segments into
            a final path. Key differences are:
            - can handle path segments which are denoted as virtual paths i.e. starting with '~/'
            - removes the '/' at the start of any path segment so that it is treated as a path relative to the previous segments.
            </summary>
        </member>
        <member name="M:Shesha.Utilities.PathHelper.EscapeFilename(System.String)">
            <summary>
            Replaces any illegal character in a file name.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.PathHelper.MapVirtualPath(System.String)">
            <summary>
            Maps a virtual path to a physical one similar to HostingEnvironment.MapPath(path)
            but simply provides a fallback if application is running outside of a Web Hosting context.
            e.g. when running Unit Tests.
            </summary>
            <param name="path">Path to be mapped.</param>
        </member>
        <member name="M:Shesha.Utilities.ReportingHelper.GetResourceStream(System.String,System.Reflection.Assembly)">
            <summary>
            Returns content of the embedded resource as MemoryStream
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="assembly">Assembly that contains a resource</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.ReportingHelper.GetResourceString(System.String,System.Reflection.Assembly)">
            <summary>
            Returns string content of the embedded resource
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="assembly">Assembly that contains a resource</param>
            <returns></returns>
        </member>
        <member name="T:Shesha.Utilities.SerializationHelper">
            <summary>
            Helper class with serialization related methods.
            </summary>
        </member>
        <member name="M:Shesha.Utilities.SerializationHelper.SerializeBase64(System.Object)">
            <summary>
            Serializes specified <paramref name="obj"/> to Base64
            </summary>
        </member>
        <member name="M:Shesha.Utilities.SerializationHelper.DeserializeBase64(System.String)">
            <summary>
            Deserializes object from Base64
            </summary>
        </member>
        <member name="M:Shesha.Utilities.SerializationHelper.DeserializeXml``1(System.String)">
            <summary>
            Deserializes specified <paramref name="xml"/> to an object of type <typeparamref name="T"/>
            </summary>
        </member>
        <member name="M:Shesha.Utilities.SerializationHelper.SerializeToXml(System.Object)">
            <summary>
            Serializes specified <paramref name="obj"/> to XML
            </summary>
        </member>
        <member name="T:Shesha.Utilities.StringHelper">
            <summary>
            Summary description for StringHelper.
            </summary>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.FirstNotEmpty(System.String[])">
            <summary>
            Returns first not empty string from the specified <paramref name="values"/>
            </summary>
            <param name="values">List of strings</param>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.L(System.String,System.String)">
            <summary>
            Get localized text
            </summary>
            <param name="name">Text to localize</param>
            <param name="localizationSourceName">Localization source name (SheshaConsts.LocalizationSourceName = "Shesha" by default)</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.RemoveDiacritics(System.String)">
            <summary>
            Remove common diacritics (accents) from a string (eg - Ë to E)
            </summary>
            <param name="value">Text to translate</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.Left(System.String,System.Int32)">
            <summary>
            Returns the first few characters in the string.
            </summary>
            <param name="value">String from which characters must be extracted.</param>
            <param name="length">Number of characters to be returned.</param>
            <returns>Returns the first few characters in the string.</returns>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.Right(System.String,System.Int32)">
            <summary>
            Returns the last few characters in the string.
            </summary>
            <param name="value">String from which characters must be extracted.</param>
            <param name="length">Number of characters to be returned.</param>
            <returns>Returns the last few characters in the string.</returns>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.CapitalizeWords(System.String)">
            <summary>
            Goes through a string and capitalises the first letter of all the words found.
            </summary>
            <param name="value">String to be capitalised.</param>
            <returns>Returns a capitalised string.</returns>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.ToFriendlyName(System.String)">
            <summary>
            Return friendly name of enum item by adding space prior to each capital letter except first letter
            </summary>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.ReplaceTags(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Replace all tags in specified string by tags values.
            </summary>
            <param name="value">string where we need to replace tags</param>
            <param name="tags">dictionary like tag=value</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.ToGuid(System.String)">
            <summary>
            Convert string to Guid. Returns Guid.Empty if the string is in incorrect format
            </summary>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.ToGuidOrNull(System.String)">
            <summary>
            Convert string to Guid or null. Returns null if the string is in incorrect format
            </summary>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.FirstValue(System.String[])">
            <summary>
            Returns the value of the first element which is not null or empty or white spaces.
            </summary>
            <param name="args">Strings from which to return the first available string.</param>
            <returns>Returns the value of the first element which is not null or empty or white spaces. If all
            the strings are null, empty or whitespaces, null is returned.</returns>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.FormatFileSize(System.Int32,System.Int32)">
            <summary>
            Formats file size
            </summary>
            <param name="size">Siza in bytes</param>
            <param name="decimalPlaces">Decimal places (default value = 2)</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.FormatFileSize(System.Int64,System.Int32)">
            <summary>
            Formats file size
            </summary>
            <param name="size">Siza in bytes</param>
            <param name="decimalPlaces">Decimal places (default value = 2)</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.ToMd5Fingerprint(System.String)">
            <summary>
            Creates an MD5 fingerprint of the string.
            </summary>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.ConvertCommaSeparatedStringToList(System.String)">
            <summary>
            Convert a comma separated string to a list.
            </summary>
            <param name="value">comma separated string to be converted to list</param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.ToCamelCase(System.String)">
            <summary>
            Converts string to camel case (taken from the Newtonsoft.Json.Utilities.StringUtils)
            </summary>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.ToBytesArray(System.String)">
            <summary>
            Converts string to array of bytes
            </summary>
            <param name="str">string to convert</param>
            <returns>array of bytes</returns>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.GetString(System.Byte[])">
            <summary>
            Converts array of bytes to string
            </summary>
            <param name="bytes">array of bytes to convert</param>
            <returns>string</returns>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.ToInt(System.String,System.Int32)">
            <summary>
            Convert string to int
            </summary>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.ToIntOrNull(System.String,System.Nullable{System.Int32})">
            <summary>
            Convert string to int
            </summary>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.ToLong(System.String,System.Int64)">
            <summary>
            Convert string to long
            </summary>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.ToDecimal(System.String,System.Decimal)">
            <summary>
            Convert string to decimal
            </summary>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.FormatAsTelephoneNumber(System.String)">
            <summary>
            Returns a string formatted into a proper telephone number.
            </summary>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.RemoveAllNonNumericCharacters(System.String)">
            <summary>
            Keeps only numeric characters in the string
            </summary>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.RemoveAllNonAlphaNumericCharacters(System.String)">
            <summary>
            Keeps only alphanumeric characters in the string
            </summary>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.SplitUpperCase(System.String)">
            <summary>
            ACKNOWLEDGEMENT: Taken from http://weblogs.asp.net/jgalloway/archive/2005/09/27/426087.aspx
            Parses a camel cased or pascal cased string and returns an array
            of the words within the string.
            NOTE: There are more compact ways of achieving this using RegEx but results from link above 
            show this to be about 15 times quicker. 
            </summary>
            <example>
            The string "PascalCasing" will return an array with two
            elements, "Pascal" and "Casing".
            </example>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.StringHelper.SplitUpperCaseToString(System.String)">
            <summary>
            ACKNOWLEDGEMENT: Taken from http://weblogs.asp.net/jgalloway/archive/2005/09/27/426087.aspx
            Parses a camel cased or pascal cased string and returns a new
            string with spaces between the words in the string.
            </summary>
            <example>
            The string "PascalCasing" will return an array with two
            elements, "Pascal" and "Casing".
            </example>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Shesha.Utilities.UtilityHelper.GetMultiReferenceListItemValueList``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="role"></param>
            <returns></returns>
        </member>
    </members>
</doc>
